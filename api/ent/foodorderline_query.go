// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/food"
	"PopcornMovie/ent/foodorderline"
	"PopcornMovie/ent/predicate"
	"PopcornMovie/ent/transaction"
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FoodOrderLineQuery is the builder for querying FoodOrderLine entities.
type FoodOrderLineQuery struct {
	config
	ctx             *QueryContext
	order           []foodorderline.OrderOption
	inters          []Interceptor
	predicates      []predicate.FoodOrderLine
	withFood        *FoodQuery
	withTransaction *TransactionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FoodOrderLineQuery builder.
func (folq *FoodOrderLineQuery) Where(ps ...predicate.FoodOrderLine) *FoodOrderLineQuery {
	folq.predicates = append(folq.predicates, ps...)
	return folq
}

// Limit the number of records to be returned by this query.
func (folq *FoodOrderLineQuery) Limit(limit int) *FoodOrderLineQuery {
	folq.ctx.Limit = &limit
	return folq
}

// Offset to start from.
func (folq *FoodOrderLineQuery) Offset(offset int) *FoodOrderLineQuery {
	folq.ctx.Offset = &offset
	return folq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (folq *FoodOrderLineQuery) Unique(unique bool) *FoodOrderLineQuery {
	folq.ctx.Unique = &unique
	return folq
}

// Order specifies how the records should be ordered.
func (folq *FoodOrderLineQuery) Order(o ...foodorderline.OrderOption) *FoodOrderLineQuery {
	folq.order = append(folq.order, o...)
	return folq
}

// QueryFood chains the current query on the "food" edge.
func (folq *FoodOrderLineQuery) QueryFood() *FoodQuery {
	query := (&FoodClient{config: folq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := folq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := folq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(foodorderline.Table, foodorderline.FieldID, selector),
			sqlgraph.To(food.Table, food.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, foodorderline.FoodTable, foodorderline.FoodColumn),
		)
		fromU = sqlgraph.SetNeighbors(folq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTransaction chains the current query on the "transaction" edge.
func (folq *FoodOrderLineQuery) QueryTransaction() *TransactionQuery {
	query := (&TransactionClient{config: folq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := folq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := folq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(foodorderline.Table, foodorderline.FieldID, selector),
			sqlgraph.To(transaction.Table, transaction.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, foodorderline.TransactionTable, foodorderline.TransactionColumn),
		)
		fromU = sqlgraph.SetNeighbors(folq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FoodOrderLine entity from the query.
// Returns a *NotFoundError when no FoodOrderLine was found.
func (folq *FoodOrderLineQuery) First(ctx context.Context) (*FoodOrderLine, error) {
	nodes, err := folq.Limit(1).All(setContextOp(ctx, folq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{foodorderline.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (folq *FoodOrderLineQuery) FirstX(ctx context.Context) *FoodOrderLine {
	node, err := folq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FoodOrderLine ID from the query.
// Returns a *NotFoundError when no FoodOrderLine ID was found.
func (folq *FoodOrderLineQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = folq.Limit(1).IDs(setContextOp(ctx, folq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{foodorderline.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (folq *FoodOrderLineQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := folq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FoodOrderLine entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FoodOrderLine entity is found.
// Returns a *NotFoundError when no FoodOrderLine entities are found.
func (folq *FoodOrderLineQuery) Only(ctx context.Context) (*FoodOrderLine, error) {
	nodes, err := folq.Limit(2).All(setContextOp(ctx, folq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{foodorderline.Label}
	default:
		return nil, &NotSingularError{foodorderline.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (folq *FoodOrderLineQuery) OnlyX(ctx context.Context) *FoodOrderLine {
	node, err := folq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FoodOrderLine ID in the query.
// Returns a *NotSingularError when more than one FoodOrderLine ID is found.
// Returns a *NotFoundError when no entities are found.
func (folq *FoodOrderLineQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = folq.Limit(2).IDs(setContextOp(ctx, folq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{foodorderline.Label}
	default:
		err = &NotSingularError{foodorderline.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (folq *FoodOrderLineQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := folq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FoodOrderLines.
func (folq *FoodOrderLineQuery) All(ctx context.Context) ([]*FoodOrderLine, error) {
	ctx = setContextOp(ctx, folq.ctx, "All")
	if err := folq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FoodOrderLine, *FoodOrderLineQuery]()
	return withInterceptors[[]*FoodOrderLine](ctx, folq, qr, folq.inters)
}

// AllX is like All, but panics if an error occurs.
func (folq *FoodOrderLineQuery) AllX(ctx context.Context) []*FoodOrderLine {
	nodes, err := folq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FoodOrderLine IDs.
func (folq *FoodOrderLineQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if folq.ctx.Unique == nil && folq.path != nil {
		folq.Unique(true)
	}
	ctx = setContextOp(ctx, folq.ctx, "IDs")
	if err = folq.Select(foodorderline.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (folq *FoodOrderLineQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := folq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (folq *FoodOrderLineQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, folq.ctx, "Count")
	if err := folq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, folq, querierCount[*FoodOrderLineQuery](), folq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (folq *FoodOrderLineQuery) CountX(ctx context.Context) int {
	count, err := folq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (folq *FoodOrderLineQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, folq.ctx, "Exist")
	switch _, err := folq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (folq *FoodOrderLineQuery) ExistX(ctx context.Context) bool {
	exist, err := folq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FoodOrderLineQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (folq *FoodOrderLineQuery) Clone() *FoodOrderLineQuery {
	if folq == nil {
		return nil
	}
	return &FoodOrderLineQuery{
		config:          folq.config,
		ctx:             folq.ctx.Clone(),
		order:           append([]foodorderline.OrderOption{}, folq.order...),
		inters:          append([]Interceptor{}, folq.inters...),
		predicates:      append([]predicate.FoodOrderLine{}, folq.predicates...),
		withFood:        folq.withFood.Clone(),
		withTransaction: folq.withTransaction.Clone(),
		// clone intermediate query.
		sql:  folq.sql.Clone(),
		path: folq.path,
	}
}

// WithFood tells the query-builder to eager-load the nodes that are connected to
// the "food" edge. The optional arguments are used to configure the query builder of the edge.
func (folq *FoodOrderLineQuery) WithFood(opts ...func(*FoodQuery)) *FoodOrderLineQuery {
	query := (&FoodClient{config: folq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	folq.withFood = query
	return folq
}

// WithTransaction tells the query-builder to eager-load the nodes that are connected to
// the "transaction" edge. The optional arguments are used to configure the query builder of the edge.
func (folq *FoodOrderLineQuery) WithTransaction(opts ...func(*TransactionQuery)) *FoodOrderLineQuery {
	query := (&TransactionClient{config: folq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	folq.withTransaction = query
	return folq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Quantity int `json:"quantity,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FoodOrderLine.Query().
//		GroupBy(foodorderline.FieldQuantity).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (folq *FoodOrderLineQuery) GroupBy(field string, fields ...string) *FoodOrderLineGroupBy {
	folq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FoodOrderLineGroupBy{build: folq}
	grbuild.flds = &folq.ctx.Fields
	grbuild.label = foodorderline.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Quantity int `json:"quantity,omitempty"`
//	}
//
//	client.FoodOrderLine.Query().
//		Select(foodorderline.FieldQuantity).
//		Scan(ctx, &v)
func (folq *FoodOrderLineQuery) Select(fields ...string) *FoodOrderLineSelect {
	folq.ctx.Fields = append(folq.ctx.Fields, fields...)
	sbuild := &FoodOrderLineSelect{FoodOrderLineQuery: folq}
	sbuild.label = foodorderline.Label
	sbuild.flds, sbuild.scan = &folq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FoodOrderLineSelect configured with the given aggregations.
func (folq *FoodOrderLineQuery) Aggregate(fns ...AggregateFunc) *FoodOrderLineSelect {
	return folq.Select().Aggregate(fns...)
}

func (folq *FoodOrderLineQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range folq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, folq); err != nil {
				return err
			}
		}
	}
	for _, f := range folq.ctx.Fields {
		if !foodorderline.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if folq.path != nil {
		prev, err := folq.path(ctx)
		if err != nil {
			return err
		}
		folq.sql = prev
	}
	return nil
}

func (folq *FoodOrderLineQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FoodOrderLine, error) {
	var (
		nodes       = []*FoodOrderLine{}
		_spec       = folq.querySpec()
		loadedTypes = [2]bool{
			folq.withFood != nil,
			folq.withTransaction != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FoodOrderLine).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FoodOrderLine{config: folq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, folq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := folq.withFood; query != nil {
		if err := folq.loadFood(ctx, query, nodes, nil,
			func(n *FoodOrderLine, e *Food) { n.Edges.Food = e }); err != nil {
			return nil, err
		}
	}
	if query := folq.withTransaction; query != nil {
		if err := folq.loadTransaction(ctx, query, nodes, nil,
			func(n *FoodOrderLine, e *Transaction) { n.Edges.Transaction = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (folq *FoodOrderLineQuery) loadFood(ctx context.Context, query *FoodQuery, nodes []*FoodOrderLine, init func(*FoodOrderLine), assign func(*FoodOrderLine, *Food)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*FoodOrderLine)
	for i := range nodes {
		fk := nodes[i].FoodID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(food.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "food_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (folq *FoodOrderLineQuery) loadTransaction(ctx context.Context, query *TransactionQuery, nodes []*FoodOrderLine, init func(*FoodOrderLine), assign func(*FoodOrderLine, *Transaction)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*FoodOrderLine)
	for i := range nodes {
		fk := nodes[i].TransactionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(transaction.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "transaction_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (folq *FoodOrderLineQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := folq.querySpec()
	_spec.Node.Columns = folq.ctx.Fields
	if len(folq.ctx.Fields) > 0 {
		_spec.Unique = folq.ctx.Unique != nil && *folq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, folq.driver, _spec)
}

func (folq *FoodOrderLineQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(foodorderline.Table, foodorderline.Columns, sqlgraph.NewFieldSpec(foodorderline.FieldID, field.TypeUUID))
	_spec.From = folq.sql
	if unique := folq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if folq.path != nil {
		_spec.Unique = true
	}
	if fields := folq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, foodorderline.FieldID)
		for i := range fields {
			if fields[i] != foodorderline.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if folq.withFood != nil {
			_spec.Node.AddColumnOnce(foodorderline.FieldFoodID)
		}
		if folq.withTransaction != nil {
			_spec.Node.AddColumnOnce(foodorderline.FieldTransactionID)
		}
	}
	if ps := folq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := folq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := folq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := folq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (folq *FoodOrderLineQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(folq.driver.Dialect())
	t1 := builder.Table(foodorderline.Table)
	columns := folq.ctx.Fields
	if len(columns) == 0 {
		columns = foodorderline.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if folq.sql != nil {
		selector = folq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if folq.ctx.Unique != nil && *folq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range folq.predicates {
		p(selector)
	}
	for _, p := range folq.order {
		p(selector)
	}
	if offset := folq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := folq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FoodOrderLineGroupBy is the group-by builder for FoodOrderLine entities.
type FoodOrderLineGroupBy struct {
	selector
	build *FoodOrderLineQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (folgb *FoodOrderLineGroupBy) Aggregate(fns ...AggregateFunc) *FoodOrderLineGroupBy {
	folgb.fns = append(folgb.fns, fns...)
	return folgb
}

// Scan applies the selector query and scans the result into the given value.
func (folgb *FoodOrderLineGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, folgb.build.ctx, "GroupBy")
	if err := folgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FoodOrderLineQuery, *FoodOrderLineGroupBy](ctx, folgb.build, folgb, folgb.build.inters, v)
}

func (folgb *FoodOrderLineGroupBy) sqlScan(ctx context.Context, root *FoodOrderLineQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(folgb.fns))
	for _, fn := range folgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*folgb.flds)+len(folgb.fns))
		for _, f := range *folgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*folgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := folgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FoodOrderLineSelect is the builder for selecting fields of FoodOrderLine entities.
type FoodOrderLineSelect struct {
	*FoodOrderLineQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fols *FoodOrderLineSelect) Aggregate(fns ...AggregateFunc) *FoodOrderLineSelect {
	fols.fns = append(fols.fns, fns...)
	return fols
}

// Scan applies the selector query and scans the result into the given value.
func (fols *FoodOrderLineSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fols.ctx, "Select")
	if err := fols.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FoodOrderLineQuery, *FoodOrderLineSelect](ctx, fols.FoodOrderLineQuery, fols, fols.inters, v)
}

func (fols *FoodOrderLineSelect) sqlScan(ctx context.Context, root *FoodOrderLineQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fols.fns))
	for _, fn := range fols.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fols.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fols.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
