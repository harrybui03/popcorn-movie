// Code generated by ent, DO NOT EDIT.

package room

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the room type in the database.
	Label = "room"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRoomNumber holds the string denoting the room_number field in the database.
	FieldRoomNumber = "room_number"
	// FieldTheaterID holds the string denoting the theater_id field in the database.
	FieldTheaterID = "theater_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTheater holds the string denoting the theater edge name in mutations.
	EdgeTheater = "theater"
	// EdgeSeats holds the string denoting the seats edge name in mutations.
	EdgeSeats = "seats"
	// EdgeShowTimes holds the string denoting the showtimes edge name in mutations.
	EdgeShowTimes = "showTimes"
	// Table holds the table name of the room in the database.
	Table = "rooms"
	// TheaterTable is the table that holds the theater relation/edge.
	TheaterTable = "rooms"
	// TheaterInverseTable is the table name for the Theater entity.
	// It exists in this package in order to avoid circular dependency with the "theater" package.
	TheaterInverseTable = "theaters"
	// TheaterColumn is the table column denoting the theater relation/edge.
	TheaterColumn = "theater_id"
	// SeatsTable is the table that holds the seats relation/edge.
	SeatsTable = "seats"
	// SeatsInverseTable is the table name for the Seat entity.
	// It exists in this package in order to avoid circular dependency with the "seat" package.
	SeatsInverseTable = "seats"
	// SeatsColumn is the table column denoting the seats relation/edge.
	SeatsColumn = "room_id"
	// ShowTimesTable is the table that holds the showTimes relation/edge.
	ShowTimesTable = "show_times"
	// ShowTimesInverseTable is the table name for the ShowTime entity.
	// It exists in this package in order to avoid circular dependency with the "showtime" package.
	ShowTimesInverseTable = "show_times"
	// ShowTimesColumn is the table column denoting the showTimes relation/edge.
	ShowTimesColumn = "room_id"
)

// Columns holds all SQL columns for room fields.
var Columns = []string{
	FieldID,
	FieldRoomNumber,
	FieldTheaterID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// RoomNumberValidator is a validator for the "room_number" field. It is called by the builders before save.
	RoomNumberValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Room queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRoomNumber orders the results by the room_number field.
func ByRoomNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoomNumber, opts...).ToFunc()
}

// ByTheaterID orders the results by the theater_id field.
func ByTheaterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTheaterID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTheaterField orders the results by theater field.
func ByTheaterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTheaterStep(), sql.OrderByField(field, opts...))
	}
}

// BySeatsCount orders the results by seats count.
func BySeatsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSeatsStep(), opts...)
	}
}

// BySeats orders the results by seats terms.
func BySeats(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeatsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByShowTimesCount orders the results by showTimes count.
func ByShowTimesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShowTimesStep(), opts...)
	}
}

// ByShowTimes orders the results by showTimes terms.
func ByShowTimes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShowTimesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTheaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TheaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TheaterTable, TheaterColumn),
	)
}
func newSeatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SeatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SeatsTable, SeatsColumn),
	)
}
func newShowTimesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShowTimesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ShowTimesTable, ShowTimesColumn),
	)
}
