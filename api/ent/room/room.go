// Code generated by ent, DO NOT EDIT.

package room

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the room type in the database.
	Label = "room"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeTheater holds the string denoting the theater edge name in mutations.
	EdgeTheater = "theater"
	// Table holds the table name of the room in the database.
	Table = "rooms"
	// TheaterTable is the table that holds the theater relation/edge.
	TheaterTable = "rooms"
	// TheaterInverseTable is the table name for the Theater entity.
	// It exists in this package in order to avoid circular dependency with the "theater" package.
	TheaterInverseTable = "theaters"
	// TheaterColumn is the table column denoting the theater relation/edge.
	TheaterColumn = "theater_rooms"
)

// Columns holds all SQL columns for room fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "rooms"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"theater_rooms",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Room queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTheaterField orders the results by theater field.
func ByTheaterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTheaterStep(), sql.OrderByField(field, opts...))
	}
}
func newTheaterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TheaterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TheaterTable, TheaterColumn),
	)
}
