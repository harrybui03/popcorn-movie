// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/schema"
	"PopcornMovie/ent/session"
	"PopcornMovie/ent/theater"
	"PopcornMovie/ent/user"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	sessionFields := schema.Session{}.Fields()
	_ = sessionFields
	// sessionDescCreatedAt is the schema descriptor for created_at field.
	sessionDescCreatedAt := sessionFields[4].Descriptor()
	// session.DefaultCreatedAt holds the default value on creation for the created_at field.
	session.DefaultCreatedAt = sessionDescCreatedAt.Default.(func() time.Time)
	theaterFields := schema.Theater{}.Fields()
	_ = theaterFields
	// theaterDescCreatedAt is the schema descriptor for created_at field.
	theaterDescCreatedAt := theaterFields[4].Descriptor()
	// theater.DefaultCreatedAt holds the default value on creation for the created_at field.
	theater.DefaultCreatedAt = theaterDescCreatedAt.Default.(func() time.Time)
	// theaterDescUpdatedAt is the schema descriptor for updated_at field.
	theaterDescUpdatedAt := theaterFields[5].Descriptor()
	// theater.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	theater.DefaultUpdatedAt = theaterDescUpdatedAt.Default.(func() time.Time)
	// theater.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	theater.UpdateDefaultUpdatedAt = theaterDescUpdatedAt.UpdateDefault.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescDisplayname is the schema descriptor for displayname field.
	userDescDisplayname := userFields[1].Descriptor()
	// user.DisplaynameValidator is a validator for the "displayname" field. It is called by the builders before save.
	user.DisplaynameValidator = userDescDisplayname.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[3].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescIsLocked is the schema descriptor for is_locked field.
	userDescIsLocked := userFields[4].Descriptor()
	// user.DefaultIsLocked holds the default value on creation for the is_locked field.
	user.DefaultIsLocked = userDescIsLocked.Default.(bool)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[6].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[7].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
