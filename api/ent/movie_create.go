// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/comment"
	"PopcornMovie/ent/movie"
	"PopcornMovie/ent/showtime"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MovieCreate is the builder for creating a Movie entity.
type MovieCreate struct {
	config
	mutation *MovieMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (mc *MovieCreate) SetTitle(s string) *MovieCreate {
	mc.mutation.SetTitle(s)
	return mc
}

// SetGenre sets the "genre" field.
func (mc *MovieCreate) SetGenre(s string) *MovieCreate {
	mc.mutation.SetGenre(s)
	return mc
}

// SetStatus sets the "status" field.
func (mc *MovieCreate) SetStatus(m movie.Status) *MovieCreate {
	mc.mutation.SetStatus(m)
	return mc
}

// SetLanguage sets the "language" field.
func (mc *MovieCreate) SetLanguage(s string) *MovieCreate {
	mc.mutation.SetLanguage(s)
	return mc
}

// SetDirector sets the "director" field.
func (mc *MovieCreate) SetDirector(s string) *MovieCreate {
	mc.mutation.SetDirector(s)
	return mc
}

// SetCast sets the "cast" field.
func (mc *MovieCreate) SetCast(s string) *MovieCreate {
	mc.mutation.SetCast(s)
	return mc
}

// SetPoster sets the "poster" field.
func (mc *MovieCreate) SetPoster(s string) *MovieCreate {
	mc.mutation.SetPoster(s)
	return mc
}

// SetRated sets the "rated" field.
func (mc *MovieCreate) SetRated(s string) *MovieCreate {
	mc.mutation.SetRated(s)
	return mc
}

// SetDuration sets the "duration" field.
func (mc *MovieCreate) SetDuration(i int) *MovieCreate {
	mc.mutation.SetDuration(i)
	return mc
}

// SetTrailer sets the "trailer" field.
func (mc *MovieCreate) SetTrailer(s string) *MovieCreate {
	mc.mutation.SetTrailer(s)
	return mc
}

// SetOpeningDay sets the "opening_day" field.
func (mc *MovieCreate) SetOpeningDay(t time.Time) *MovieCreate {
	mc.mutation.SetOpeningDay(t)
	return mc
}

// SetStory sets the "story" field.
func (mc *MovieCreate) SetStory(s string) *MovieCreate {
	mc.mutation.SetStory(s)
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MovieCreate) SetCreatedAt(t time.Time) *MovieCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MovieCreate) SetNillableCreatedAt(t *time.Time) *MovieCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MovieCreate) SetUpdatedAt(t time.Time) *MovieCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MovieCreate) SetNillableUpdatedAt(t *time.Time) *MovieCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MovieCreate) SetID(u uuid.UUID) *MovieCreate {
	mc.mutation.SetID(u)
	return mc
}

// AddShowTimeIDs adds the "showTimes" edge to the ShowTime entity by IDs.
func (mc *MovieCreate) AddShowTimeIDs(ids ...uuid.UUID) *MovieCreate {
	mc.mutation.AddShowTimeIDs(ids...)
	return mc
}

// AddShowTimes adds the "showTimes" edges to the ShowTime entity.
func (mc *MovieCreate) AddShowTimes(s ...*ShowTime) *MovieCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mc.AddShowTimeIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (mc *MovieCreate) AddCommentIDs(ids ...uuid.UUID) *MovieCreate {
	mc.mutation.AddCommentIDs(ids...)
	return mc
}

// AddComments adds the "comments" edges to the Comment entity.
func (mc *MovieCreate) AddComments(c ...*Comment) *MovieCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mc.AddCommentIDs(ids...)
}

// Mutation returns the MovieMutation object of the builder.
func (mc *MovieCreate) Mutation() *MovieMutation {
	return mc.mutation
}

// Save creates the Movie in the database.
func (mc *MovieCreate) Save(ctx context.Context) (*Movie, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MovieCreate) SaveX(ctx context.Context) *Movie {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MovieCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MovieCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MovieCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := movie.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := movie.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MovieCreate) check() error {
	if _, ok := mc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Movie.title"`)}
	}
	if _, ok := mc.mutation.Genre(); !ok {
		return &ValidationError{Name: "genre", err: errors.New(`ent: missing required field "Movie.genre"`)}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Movie.status"`)}
	}
	if v, ok := mc.mutation.Status(); ok {
		if err := movie.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Movie.status": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Movie.language"`)}
	}
	if _, ok := mc.mutation.Director(); !ok {
		return &ValidationError{Name: "director", err: errors.New(`ent: missing required field "Movie.director"`)}
	}
	if _, ok := mc.mutation.Cast(); !ok {
		return &ValidationError{Name: "cast", err: errors.New(`ent: missing required field "Movie.cast"`)}
	}
	if _, ok := mc.mutation.Poster(); !ok {
		return &ValidationError{Name: "poster", err: errors.New(`ent: missing required field "Movie.poster"`)}
	}
	if _, ok := mc.mutation.Rated(); !ok {
		return &ValidationError{Name: "rated", err: errors.New(`ent: missing required field "Movie.rated"`)}
	}
	if _, ok := mc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "Movie.duration"`)}
	}
	if _, ok := mc.mutation.Trailer(); !ok {
		return &ValidationError{Name: "trailer", err: errors.New(`ent: missing required field "Movie.trailer"`)}
	}
	if _, ok := mc.mutation.OpeningDay(); !ok {
		return &ValidationError{Name: "opening_day", err: errors.New(`ent: missing required field "Movie.opening_day"`)}
	}
	if _, ok := mc.mutation.Story(); !ok {
		return &ValidationError{Name: "story", err: errors.New(`ent: missing required field "Movie.story"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Movie.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Movie.updated_at"`)}
	}
	return nil
}

func (mc *MovieCreate) sqlSave(ctx context.Context) (*Movie, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MovieCreate) createSpec() (*Movie, *sqlgraph.CreateSpec) {
	var (
		_node = &Movie{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(movie.Table, sqlgraph.NewFieldSpec(movie.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mc.mutation.Title(); ok {
		_spec.SetField(movie.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := mc.mutation.Genre(); ok {
		_spec.SetField(movie.FieldGenre, field.TypeString, value)
		_node.Genre = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(movie.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := mc.mutation.Language(); ok {
		_spec.SetField(movie.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := mc.mutation.Director(); ok {
		_spec.SetField(movie.FieldDirector, field.TypeString, value)
		_node.Director = value
	}
	if value, ok := mc.mutation.Cast(); ok {
		_spec.SetField(movie.FieldCast, field.TypeString, value)
		_node.Cast = value
	}
	if value, ok := mc.mutation.Poster(); ok {
		_spec.SetField(movie.FieldPoster, field.TypeString, value)
		_node.Poster = value
	}
	if value, ok := mc.mutation.Rated(); ok {
		_spec.SetField(movie.FieldRated, field.TypeString, value)
		_node.Rated = value
	}
	if value, ok := mc.mutation.Duration(); ok {
		_spec.SetField(movie.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := mc.mutation.Trailer(); ok {
		_spec.SetField(movie.FieldTrailer, field.TypeString, value)
		_node.Trailer = value
	}
	if value, ok := mc.mutation.OpeningDay(); ok {
		_spec.SetField(movie.FieldOpeningDay, field.TypeTime, value)
		_node.OpeningDay = value
	}
	if value, ok := mc.mutation.Story(); ok {
		_spec.SetField(movie.FieldStory, field.TypeString, value)
		_node.Story = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(movie.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(movie.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := mc.mutation.ShowTimesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.ShowTimesTable,
			Columns: []string{movie.ShowTimesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(showtime.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.CommentsTable,
			Columns: []string{movie.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Movie.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MovieUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (mc *MovieCreate) OnConflict(opts ...sql.ConflictOption) *MovieUpsertOne {
	mc.conflict = opts
	return &MovieUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Movie.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MovieCreate) OnConflictColumns(columns ...string) *MovieUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MovieUpsertOne{
		create: mc,
	}
}

type (
	// MovieUpsertOne is the builder for "upsert"-ing
	//  one Movie node.
	MovieUpsertOne struct {
		create *MovieCreate
	}

	// MovieUpsert is the "OnConflict" setter.
	MovieUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *MovieUpsert) SetTitle(v string) *MovieUpsert {
	u.Set(movie.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MovieUpsert) UpdateTitle() *MovieUpsert {
	u.SetExcluded(movie.FieldTitle)
	return u
}

// SetGenre sets the "genre" field.
func (u *MovieUpsert) SetGenre(v string) *MovieUpsert {
	u.Set(movie.FieldGenre, v)
	return u
}

// UpdateGenre sets the "genre" field to the value that was provided on create.
func (u *MovieUpsert) UpdateGenre() *MovieUpsert {
	u.SetExcluded(movie.FieldGenre)
	return u
}

// SetStatus sets the "status" field.
func (u *MovieUpsert) SetStatus(v movie.Status) *MovieUpsert {
	u.Set(movie.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MovieUpsert) UpdateStatus() *MovieUpsert {
	u.SetExcluded(movie.FieldStatus)
	return u
}

// SetLanguage sets the "language" field.
func (u *MovieUpsert) SetLanguage(v string) *MovieUpsert {
	u.Set(movie.FieldLanguage, v)
	return u
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *MovieUpsert) UpdateLanguage() *MovieUpsert {
	u.SetExcluded(movie.FieldLanguage)
	return u
}

// SetDirector sets the "director" field.
func (u *MovieUpsert) SetDirector(v string) *MovieUpsert {
	u.Set(movie.FieldDirector, v)
	return u
}

// UpdateDirector sets the "director" field to the value that was provided on create.
func (u *MovieUpsert) UpdateDirector() *MovieUpsert {
	u.SetExcluded(movie.FieldDirector)
	return u
}

// SetCast sets the "cast" field.
func (u *MovieUpsert) SetCast(v string) *MovieUpsert {
	u.Set(movie.FieldCast, v)
	return u
}

// UpdateCast sets the "cast" field to the value that was provided on create.
func (u *MovieUpsert) UpdateCast() *MovieUpsert {
	u.SetExcluded(movie.FieldCast)
	return u
}

// SetPoster sets the "poster" field.
func (u *MovieUpsert) SetPoster(v string) *MovieUpsert {
	u.Set(movie.FieldPoster, v)
	return u
}

// UpdatePoster sets the "poster" field to the value that was provided on create.
func (u *MovieUpsert) UpdatePoster() *MovieUpsert {
	u.SetExcluded(movie.FieldPoster)
	return u
}

// SetRated sets the "rated" field.
func (u *MovieUpsert) SetRated(v string) *MovieUpsert {
	u.Set(movie.FieldRated, v)
	return u
}

// UpdateRated sets the "rated" field to the value that was provided on create.
func (u *MovieUpsert) UpdateRated() *MovieUpsert {
	u.SetExcluded(movie.FieldRated)
	return u
}

// SetDuration sets the "duration" field.
func (u *MovieUpsert) SetDuration(v int) *MovieUpsert {
	u.Set(movie.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *MovieUpsert) UpdateDuration() *MovieUpsert {
	u.SetExcluded(movie.FieldDuration)
	return u
}

// AddDuration adds v to the "duration" field.
func (u *MovieUpsert) AddDuration(v int) *MovieUpsert {
	u.Add(movie.FieldDuration, v)
	return u
}

// SetTrailer sets the "trailer" field.
func (u *MovieUpsert) SetTrailer(v string) *MovieUpsert {
	u.Set(movie.FieldTrailer, v)
	return u
}

// UpdateTrailer sets the "trailer" field to the value that was provided on create.
func (u *MovieUpsert) UpdateTrailer() *MovieUpsert {
	u.SetExcluded(movie.FieldTrailer)
	return u
}

// SetOpeningDay sets the "opening_day" field.
func (u *MovieUpsert) SetOpeningDay(v time.Time) *MovieUpsert {
	u.Set(movie.FieldOpeningDay, v)
	return u
}

// UpdateOpeningDay sets the "opening_day" field to the value that was provided on create.
func (u *MovieUpsert) UpdateOpeningDay() *MovieUpsert {
	u.SetExcluded(movie.FieldOpeningDay)
	return u
}

// SetStory sets the "story" field.
func (u *MovieUpsert) SetStory(v string) *MovieUpsert {
	u.Set(movie.FieldStory, v)
	return u
}

// UpdateStory sets the "story" field to the value that was provided on create.
func (u *MovieUpsert) UpdateStory() *MovieUpsert {
	u.SetExcluded(movie.FieldStory)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MovieUpsert) SetUpdatedAt(v time.Time) *MovieUpsert {
	u.Set(movie.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MovieUpsert) UpdateUpdatedAt() *MovieUpsert {
	u.SetExcluded(movie.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Movie.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(movie.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MovieUpsertOne) UpdateNewValues() *MovieUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(movie.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(movie.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Movie.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MovieUpsertOne) Ignore() *MovieUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MovieUpsertOne) DoNothing() *MovieUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MovieCreate.OnConflict
// documentation for more info.
func (u *MovieUpsertOne) Update(set func(*MovieUpsert)) *MovieUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MovieUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *MovieUpsertOne) SetTitle(v string) *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MovieUpsertOne) UpdateTitle() *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateTitle()
	})
}

// SetGenre sets the "genre" field.
func (u *MovieUpsertOne) SetGenre(v string) *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.SetGenre(v)
	})
}

// UpdateGenre sets the "genre" field to the value that was provided on create.
func (u *MovieUpsertOne) UpdateGenre() *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateGenre()
	})
}

// SetStatus sets the "status" field.
func (u *MovieUpsertOne) SetStatus(v movie.Status) *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MovieUpsertOne) UpdateStatus() *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateStatus()
	})
}

// SetLanguage sets the "language" field.
func (u *MovieUpsertOne) SetLanguage(v string) *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *MovieUpsertOne) UpdateLanguage() *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateLanguage()
	})
}

// SetDirector sets the "director" field.
func (u *MovieUpsertOne) SetDirector(v string) *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.SetDirector(v)
	})
}

// UpdateDirector sets the "director" field to the value that was provided on create.
func (u *MovieUpsertOne) UpdateDirector() *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateDirector()
	})
}

// SetCast sets the "cast" field.
func (u *MovieUpsertOne) SetCast(v string) *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.SetCast(v)
	})
}

// UpdateCast sets the "cast" field to the value that was provided on create.
func (u *MovieUpsertOne) UpdateCast() *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateCast()
	})
}

// SetPoster sets the "poster" field.
func (u *MovieUpsertOne) SetPoster(v string) *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.SetPoster(v)
	})
}

// UpdatePoster sets the "poster" field to the value that was provided on create.
func (u *MovieUpsertOne) UpdatePoster() *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.UpdatePoster()
	})
}

// SetRated sets the "rated" field.
func (u *MovieUpsertOne) SetRated(v string) *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.SetRated(v)
	})
}

// UpdateRated sets the "rated" field to the value that was provided on create.
func (u *MovieUpsertOne) UpdateRated() *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateRated()
	})
}

// SetDuration sets the "duration" field.
func (u *MovieUpsertOne) SetDuration(v int) *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *MovieUpsertOne) AddDuration(v int) *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *MovieUpsertOne) UpdateDuration() *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateDuration()
	})
}

// SetTrailer sets the "trailer" field.
func (u *MovieUpsertOne) SetTrailer(v string) *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.SetTrailer(v)
	})
}

// UpdateTrailer sets the "trailer" field to the value that was provided on create.
func (u *MovieUpsertOne) UpdateTrailer() *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateTrailer()
	})
}

// SetOpeningDay sets the "opening_day" field.
func (u *MovieUpsertOne) SetOpeningDay(v time.Time) *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.SetOpeningDay(v)
	})
}

// UpdateOpeningDay sets the "opening_day" field to the value that was provided on create.
func (u *MovieUpsertOne) UpdateOpeningDay() *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateOpeningDay()
	})
}

// SetStory sets the "story" field.
func (u *MovieUpsertOne) SetStory(v string) *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.SetStory(v)
	})
}

// UpdateStory sets the "story" field to the value that was provided on create.
func (u *MovieUpsertOne) UpdateStory() *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateStory()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MovieUpsertOne) SetUpdatedAt(v time.Time) *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MovieUpsertOne) UpdateUpdatedAt() *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *MovieUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MovieCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MovieUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MovieUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MovieUpsertOne.ID is not supported by MySQL driver. Use MovieUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MovieUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MovieCreateBulk is the builder for creating many Movie entities in bulk.
type MovieCreateBulk struct {
	config
	err      error
	builders []*MovieCreate
	conflict []sql.ConflictOption
}

// Save creates the Movie entities in the database.
func (mcb *MovieCreateBulk) Save(ctx context.Context) ([]*Movie, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Movie, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MovieMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MovieCreateBulk) SaveX(ctx context.Context) []*Movie {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MovieCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MovieCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Movie.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MovieUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (mcb *MovieCreateBulk) OnConflict(opts ...sql.ConflictOption) *MovieUpsertBulk {
	mcb.conflict = opts
	return &MovieUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Movie.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MovieCreateBulk) OnConflictColumns(columns ...string) *MovieUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MovieUpsertBulk{
		create: mcb,
	}
}

// MovieUpsertBulk is the builder for "upsert"-ing
// a bulk of Movie nodes.
type MovieUpsertBulk struct {
	create *MovieCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Movie.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(movie.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MovieUpsertBulk) UpdateNewValues() *MovieUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(movie.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(movie.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Movie.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MovieUpsertBulk) Ignore() *MovieUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MovieUpsertBulk) DoNothing() *MovieUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MovieCreateBulk.OnConflict
// documentation for more info.
func (u *MovieUpsertBulk) Update(set func(*MovieUpsert)) *MovieUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MovieUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *MovieUpsertBulk) SetTitle(v string) *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MovieUpsertBulk) UpdateTitle() *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateTitle()
	})
}

// SetGenre sets the "genre" field.
func (u *MovieUpsertBulk) SetGenre(v string) *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.SetGenre(v)
	})
}

// UpdateGenre sets the "genre" field to the value that was provided on create.
func (u *MovieUpsertBulk) UpdateGenre() *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateGenre()
	})
}

// SetStatus sets the "status" field.
func (u *MovieUpsertBulk) SetStatus(v movie.Status) *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MovieUpsertBulk) UpdateStatus() *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateStatus()
	})
}

// SetLanguage sets the "language" field.
func (u *MovieUpsertBulk) SetLanguage(v string) *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.SetLanguage(v)
	})
}

// UpdateLanguage sets the "language" field to the value that was provided on create.
func (u *MovieUpsertBulk) UpdateLanguage() *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateLanguage()
	})
}

// SetDirector sets the "director" field.
func (u *MovieUpsertBulk) SetDirector(v string) *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.SetDirector(v)
	})
}

// UpdateDirector sets the "director" field to the value that was provided on create.
func (u *MovieUpsertBulk) UpdateDirector() *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateDirector()
	})
}

// SetCast sets the "cast" field.
func (u *MovieUpsertBulk) SetCast(v string) *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.SetCast(v)
	})
}

// UpdateCast sets the "cast" field to the value that was provided on create.
func (u *MovieUpsertBulk) UpdateCast() *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateCast()
	})
}

// SetPoster sets the "poster" field.
func (u *MovieUpsertBulk) SetPoster(v string) *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.SetPoster(v)
	})
}

// UpdatePoster sets the "poster" field to the value that was provided on create.
func (u *MovieUpsertBulk) UpdatePoster() *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.UpdatePoster()
	})
}

// SetRated sets the "rated" field.
func (u *MovieUpsertBulk) SetRated(v string) *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.SetRated(v)
	})
}

// UpdateRated sets the "rated" field to the value that was provided on create.
func (u *MovieUpsertBulk) UpdateRated() *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateRated()
	})
}

// SetDuration sets the "duration" field.
func (u *MovieUpsertBulk) SetDuration(v int) *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *MovieUpsertBulk) AddDuration(v int) *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *MovieUpsertBulk) UpdateDuration() *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateDuration()
	})
}

// SetTrailer sets the "trailer" field.
func (u *MovieUpsertBulk) SetTrailer(v string) *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.SetTrailer(v)
	})
}

// UpdateTrailer sets the "trailer" field to the value that was provided on create.
func (u *MovieUpsertBulk) UpdateTrailer() *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateTrailer()
	})
}

// SetOpeningDay sets the "opening_day" field.
func (u *MovieUpsertBulk) SetOpeningDay(v time.Time) *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.SetOpeningDay(v)
	})
}

// UpdateOpeningDay sets the "opening_day" field to the value that was provided on create.
func (u *MovieUpsertBulk) UpdateOpeningDay() *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateOpeningDay()
	})
}

// SetStory sets the "story" field.
func (u *MovieUpsertBulk) SetStory(v string) *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.SetStory(v)
	})
}

// UpdateStory sets the "story" field to the value that was provided on create.
func (u *MovieUpsertBulk) UpdateStory() *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateStory()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MovieUpsertBulk) SetUpdatedAt(v time.Time) *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MovieUpsertBulk) UpdateUpdatedAt() *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *MovieUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MovieCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MovieCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MovieUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
