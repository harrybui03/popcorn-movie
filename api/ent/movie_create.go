// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/comment"
	"PopcornMovie/ent/movie"
	"PopcornMovie/ent/showtime"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MovieCreate is the builder for creating a Movie entity.
type MovieCreate struct {
	config
	mutation *MovieMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (mc *MovieCreate) SetTitle(s string) *MovieCreate {
	mc.mutation.SetTitle(s)
	return mc
}

// SetGenre sets the "genre" field.
func (mc *MovieCreate) SetGenre(s string) *MovieCreate {
	mc.mutation.SetGenre(s)
	return mc
}

// SetStatus sets the "status" field.
func (mc *MovieCreate) SetStatus(m movie.Status) *MovieCreate {
	mc.mutation.SetStatus(m)
	return mc
}

// SetLanguage sets the "language" field.
func (mc *MovieCreate) SetLanguage(s string) *MovieCreate {
	mc.mutation.SetLanguage(s)
	return mc
}

// SetDirector sets the "director" field.
func (mc *MovieCreate) SetDirector(s string) *MovieCreate {
	mc.mutation.SetDirector(s)
	return mc
}

// SetCast sets the "cast" field.
func (mc *MovieCreate) SetCast(s string) *MovieCreate {
	mc.mutation.SetCast(s)
	return mc
}

// SetPoster sets the "poster" field.
func (mc *MovieCreate) SetPoster(s string) *MovieCreate {
	mc.mutation.SetPoster(s)
	return mc
}

// SetRated sets the "rated" field.
func (mc *MovieCreate) SetRated(s string) *MovieCreate {
	mc.mutation.SetRated(s)
	return mc
}

// SetDuration sets the "duration" field.
func (mc *MovieCreate) SetDuration(i int) *MovieCreate {
	mc.mutation.SetDuration(i)
	return mc
}

// SetTrailer sets the "trailer" field.
func (mc *MovieCreate) SetTrailer(s string) *MovieCreate {
	mc.mutation.SetTrailer(s)
	return mc
}

// SetOpeningDay sets the "opening_day" field.
func (mc *MovieCreate) SetOpeningDay(t time.Time) *MovieCreate {
	mc.mutation.SetOpeningDay(t)
	return mc
}

// SetStory sets the "story" field.
func (mc *MovieCreate) SetStory(s string) *MovieCreate {
	mc.mutation.SetStory(s)
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MovieCreate) SetCreatedAt(t time.Time) *MovieCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MovieCreate) SetNillableCreatedAt(t *time.Time) *MovieCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MovieCreate) SetUpdatedAt(t time.Time) *MovieCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MovieCreate) SetNillableUpdatedAt(t *time.Time) *MovieCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MovieCreate) SetID(u uuid.UUID) *MovieCreate {
	mc.mutation.SetID(u)
	return mc
}

// AddShowTimeIDs adds the "showTimes" edge to the ShowTime entity by IDs.
func (mc *MovieCreate) AddShowTimeIDs(ids ...uuid.UUID) *MovieCreate {
	mc.mutation.AddShowTimeIDs(ids...)
	return mc
}

// AddShowTimes adds the "showTimes" edges to the ShowTime entity.
func (mc *MovieCreate) AddShowTimes(s ...*ShowTime) *MovieCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mc.AddShowTimeIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (mc *MovieCreate) AddCommentIDs(ids ...uuid.UUID) *MovieCreate {
	mc.mutation.AddCommentIDs(ids...)
	return mc
}

// AddComments adds the "comments" edges to the Comment entity.
func (mc *MovieCreate) AddComments(c ...*Comment) *MovieCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mc.AddCommentIDs(ids...)
}

// Mutation returns the MovieMutation object of the builder.
func (mc *MovieCreate) Mutation() *MovieMutation {
	return mc.mutation
}

// Save creates the Movie in the database.
func (mc *MovieCreate) Save(ctx context.Context) (*Movie, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MovieCreate) SaveX(ctx context.Context) *Movie {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MovieCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MovieCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MovieCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := movie.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := movie.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MovieCreate) check() error {
	if _, ok := mc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Movie.title"`)}
	}
	if _, ok := mc.mutation.Genre(); !ok {
		return &ValidationError{Name: "genre", err: errors.New(`ent: missing required field "Movie.genre"`)}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Movie.status"`)}
	}
	if v, ok := mc.mutation.Status(); ok {
		if err := movie.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Movie.status": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Movie.language"`)}
	}
	if _, ok := mc.mutation.Director(); !ok {
		return &ValidationError{Name: "director", err: errors.New(`ent: missing required field "Movie.director"`)}
	}
	if _, ok := mc.mutation.Cast(); !ok {
		return &ValidationError{Name: "cast", err: errors.New(`ent: missing required field "Movie.cast"`)}
	}
	if _, ok := mc.mutation.Poster(); !ok {
		return &ValidationError{Name: "poster", err: errors.New(`ent: missing required field "Movie.poster"`)}
	}
	if _, ok := mc.mutation.Rated(); !ok {
		return &ValidationError{Name: "rated", err: errors.New(`ent: missing required field "Movie.rated"`)}
	}
	if _, ok := mc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "Movie.duration"`)}
	}
	if _, ok := mc.mutation.Trailer(); !ok {
		return &ValidationError{Name: "trailer", err: errors.New(`ent: missing required field "Movie.trailer"`)}
	}
	if _, ok := mc.mutation.OpeningDay(); !ok {
		return &ValidationError{Name: "opening_day", err: errors.New(`ent: missing required field "Movie.opening_day"`)}
	}
	if _, ok := mc.mutation.Story(); !ok {
		return &ValidationError{Name: "story", err: errors.New(`ent: missing required field "Movie.story"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Movie.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Movie.updated_at"`)}
	}
	return nil
}

func (mc *MovieCreate) sqlSave(ctx context.Context) (*Movie, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MovieCreate) createSpec() (*Movie, *sqlgraph.CreateSpec) {
	var (
		_node = &Movie{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(movie.Table, sqlgraph.NewFieldSpec(movie.FieldID, field.TypeUUID))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mc.mutation.Title(); ok {
		_spec.SetField(movie.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := mc.mutation.Genre(); ok {
		_spec.SetField(movie.FieldGenre, field.TypeString, value)
		_node.Genre = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(movie.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := mc.mutation.Language(); ok {
		_spec.SetField(movie.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := mc.mutation.Director(); ok {
		_spec.SetField(movie.FieldDirector, field.TypeString, value)
		_node.Director = value
	}
	if value, ok := mc.mutation.Cast(); ok {
		_spec.SetField(movie.FieldCast, field.TypeString, value)
		_node.Cast = value
	}
	if value, ok := mc.mutation.Poster(); ok {
		_spec.SetField(movie.FieldPoster, field.TypeString, value)
		_node.Poster = value
	}
	if value, ok := mc.mutation.Rated(); ok {
		_spec.SetField(movie.FieldRated, field.TypeString, value)
		_node.Rated = value
	}
	if value, ok := mc.mutation.Duration(); ok {
		_spec.SetField(movie.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := mc.mutation.Trailer(); ok {
		_spec.SetField(movie.FieldTrailer, field.TypeString, value)
		_node.Trailer = value
	}
	if value, ok := mc.mutation.OpeningDay(); ok {
		_spec.SetField(movie.FieldOpeningDay, field.TypeTime, value)
		_node.OpeningDay = value
	}
	if value, ok := mc.mutation.Story(); ok {
		_spec.SetField(movie.FieldStory, field.TypeString, value)
		_node.Story = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(movie.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(movie.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := mc.mutation.ShowTimesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.ShowTimesTable,
			Columns: []string{movie.ShowTimesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(showtime.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   movie.CommentsTable,
			Columns: []string{movie.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MovieCreateBulk is the builder for creating many Movie entities in bulk.
type MovieCreateBulk struct {
	config
	err      error
	builders []*MovieCreate
}

// Save creates the Movie entities in the database.
func (mcb *MovieCreateBulk) Save(ctx context.Context) ([]*Movie, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Movie, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MovieMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MovieCreateBulk) SaveX(ctx context.Context) []*Movie {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MovieCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MovieCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
