// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/movie"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Movie is the model entity for the Movie schema.
type Movie struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Genre holds the value of the "genre" field.
	Genre string `json:"genre,omitempty"`
	// Status holds the value of the "status" field.
	Status movie.Status `json:"status,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// Director holds the value of the "director" field.
	Director string `json:"director,omitempty"`
	// Cast holds the value of the "cast" field.
	Cast string `json:"cast,omitempty"`
	// Poster holds the value of the "poster" field.
	Poster string `json:"poster,omitempty"`
	// Rated holds the value of the "rated" field.
	Rated string `json:"rated,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration int `json:"duration,omitempty"`
	// Trailer holds the value of the "trailer" field.
	Trailer string `json:"trailer,omitempty"`
	// OpeningDay holds the value of the "opening_day" field.
	OpeningDay time.Time `json:"opening_day,omitempty"`
	// Story holds the value of the "story" field.
	Story string `json:"story,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MovieQuery when eager-loading is set.
	Edges        MovieEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MovieEdges holds the relations/edges for other nodes in the graph.
type MovieEdges struct {
	// ShowTimes holds the value of the showTimes edge.
	ShowTimes []*ShowTime `json:"showTimes,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ShowTimesOrErr returns the ShowTimes value or an error if the edge
// was not loaded in eager-loading.
func (e MovieEdges) ShowTimesOrErr() ([]*ShowTime, error) {
	if e.loadedTypes[0] {
		return e.ShowTimes, nil
	}
	return nil, &NotLoadedError{edge: "showTimes"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e MovieEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[1] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Movie) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case movie.FieldDuration:
			values[i] = new(sql.NullInt64)
		case movie.FieldTitle, movie.FieldGenre, movie.FieldStatus, movie.FieldLanguage, movie.FieldDirector, movie.FieldCast, movie.FieldPoster, movie.FieldRated, movie.FieldTrailer, movie.FieldStory:
			values[i] = new(sql.NullString)
		case movie.FieldOpeningDay, movie.FieldCreatedAt, movie.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case movie.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Movie fields.
func (m *Movie) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case movie.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case movie.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				m.Title = value.String
			}
		case movie.FieldGenre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field genre", values[i])
			} else if value.Valid {
				m.Genre = value.String
			}
		case movie.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				m.Status = movie.Status(value.String)
			}
		case movie.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				m.Language = value.String
			}
		case movie.FieldDirector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field director", values[i])
			} else if value.Valid {
				m.Director = value.String
			}
		case movie.FieldCast:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cast", values[i])
			} else if value.Valid {
				m.Cast = value.String
			}
		case movie.FieldPoster:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field poster", values[i])
			} else if value.Valid {
				m.Poster = value.String
			}
		case movie.FieldRated:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rated", values[i])
			} else if value.Valid {
				m.Rated = value.String
			}
		case movie.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				m.Duration = int(value.Int64)
			}
		case movie.FieldTrailer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trailer", values[i])
			} else if value.Valid {
				m.Trailer = value.String
			}
		case movie.FieldOpeningDay:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field opening_day", values[i])
			} else if value.Valid {
				m.OpeningDay = value.Time
			}
		case movie.FieldStory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field story", values[i])
			} else if value.Valid {
				m.Story = value.String
			}
		case movie.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case movie.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Movie.
// This includes values selected through modifiers, order, etc.
func (m *Movie) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryShowTimes queries the "showTimes" edge of the Movie entity.
func (m *Movie) QueryShowTimes() *ShowTimeQuery {
	return NewMovieClient(m.config).QueryShowTimes(m)
}

// QueryComments queries the "comments" edge of the Movie entity.
func (m *Movie) QueryComments() *CommentQuery {
	return NewMovieClient(m.config).QueryComments(m)
}

// Update returns a builder for updating this Movie.
// Note that you need to call Movie.Unwrap() before calling this method if this Movie
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Movie) Update() *MovieUpdateOne {
	return NewMovieClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Movie entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Movie) Unwrap() *Movie {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Movie is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Movie) String() string {
	var builder strings.Builder
	builder.WriteString("Movie(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("title=")
	builder.WriteString(m.Title)
	builder.WriteString(", ")
	builder.WriteString("genre=")
	builder.WriteString(m.Genre)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", m.Status))
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(m.Language)
	builder.WriteString(", ")
	builder.WriteString("director=")
	builder.WriteString(m.Director)
	builder.WriteString(", ")
	builder.WriteString("cast=")
	builder.WriteString(m.Cast)
	builder.WriteString(", ")
	builder.WriteString("poster=")
	builder.WriteString(m.Poster)
	builder.WriteString(", ")
	builder.WriteString("rated=")
	builder.WriteString(m.Rated)
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", m.Duration))
	builder.WriteString(", ")
	builder.WriteString("trailer=")
	builder.WriteString(m.Trailer)
	builder.WriteString(", ")
	builder.WriteString("opening_day=")
	builder.WriteString(m.OpeningDay.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("story=")
	builder.WriteString(m.Story)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Movies is a parsable slice of Movie.
type Movies []*Movie
