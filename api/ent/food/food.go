// Code generated by ent, DO NOT EDIT.

package food

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the food type in the database.
	Label = "food"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeFoodOrderLines holds the string denoting the food_order_lines edge name in mutations.
	EdgeFoodOrderLines = "food_order_lines"
	// Table holds the table name of the food in the database.
	Table = "foods"
	// FoodOrderLinesTable is the table that holds the food_order_lines relation/edge.
	FoodOrderLinesTable = "food_order_lines"
	// FoodOrderLinesInverseTable is the table name for the FoodOrderLine entity.
	// It exists in this package in order to avoid circular dependency with the "foodorderline" package.
	FoodOrderLinesInverseTable = "food_order_lines"
	// FoodOrderLinesColumn is the table column denoting the food_order_lines relation/edge.
	FoodOrderLinesColumn = "food_id"
)

// Columns holds all SQL columns for food fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPrice,
	FieldImage,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Food queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByImage orders the results by the image field.
func ByImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByFoodOrderLinesCount orders the results by food_order_lines count.
func ByFoodOrderLinesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFoodOrderLinesStep(), opts...)
	}
}

// ByFoodOrderLines orders the results by food_order_lines terms.
func ByFoodOrderLines(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFoodOrderLinesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFoodOrderLinesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FoodOrderLinesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FoodOrderLinesTable, FoodOrderLinesColumn),
	)
}
