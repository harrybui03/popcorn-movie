// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/predicate"
	"PopcornMovie/ent/room"
	"PopcornMovie/ent/seat"
	"PopcornMovie/ent/ticket"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SeatUpdate is the builder for updating Seat entities.
type SeatUpdate struct {
	config
	hooks    []Hook
	mutation *SeatMutation
}

// Where appends a list predicates to the SeatUpdate builder.
func (su *SeatUpdate) Where(ps ...predicate.Seat) *SeatUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetSeatNumber sets the "seat_number" field.
func (su *SeatUpdate) SetSeatNumber(s string) *SeatUpdate {
	su.mutation.SetSeatNumber(s)
	return su
}

// SetNillableSeatNumber sets the "seat_number" field if the given value is not nil.
func (su *SeatUpdate) SetNillableSeatNumber(s *string) *SeatUpdate {
	if s != nil {
		su.SetSeatNumber(*s)
	}
	return su
}

// SetRoomID sets the "room_id" field.
func (su *SeatUpdate) SetRoomID(u uuid.UUID) *SeatUpdate {
	su.mutation.SetRoomID(u)
	return su
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (su *SeatUpdate) SetNillableRoomID(u *uuid.UUID) *SeatUpdate {
	if u != nil {
		su.SetRoomID(*u)
	}
	return su
}

// SetCategory sets the "category" field.
func (su *SeatUpdate) SetCategory(s seat.Category) *SeatUpdate {
	su.mutation.SetCategory(s)
	return su
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (su *SeatUpdate) SetNillableCategory(s *seat.Category) *SeatUpdate {
	if s != nil {
		su.SetCategory(*s)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SeatUpdate) SetUpdatedAt(t time.Time) *SeatUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetRoom sets the "room" edge to the Room entity.
func (su *SeatUpdate) SetRoom(r *Room) *SeatUpdate {
	return su.SetRoomID(r.ID)
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (su *SeatUpdate) AddTicketIDs(ids ...uuid.UUID) *SeatUpdate {
	su.mutation.AddTicketIDs(ids...)
	return su
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (su *SeatUpdate) AddTickets(t ...*Ticket) *SeatUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTicketIDs(ids...)
}

// Mutation returns the SeatMutation object of the builder.
func (su *SeatUpdate) Mutation() *SeatMutation {
	return su.mutation
}

// ClearRoom clears the "room" edge to the Room entity.
func (su *SeatUpdate) ClearRoom() *SeatUpdate {
	su.mutation.ClearRoom()
	return su
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (su *SeatUpdate) ClearTickets() *SeatUpdate {
	su.mutation.ClearTickets()
	return su
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (su *SeatUpdate) RemoveTicketIDs(ids ...uuid.UUID) *SeatUpdate {
	su.mutation.RemoveTicketIDs(ids...)
	return su
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (su *SeatUpdate) RemoveTickets(t ...*Ticket) *SeatUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTicketIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SeatUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SeatUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SeatUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SeatUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SeatUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := seat.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SeatUpdate) check() error {
	if v, ok := su.mutation.Category(); ok {
		if err := seat.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Seat.category": %w`, err)}
		}
	}
	if _, ok := su.mutation.RoomID(); su.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Seat.room"`)
	}
	return nil
}

func (su *SeatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(seat.Table, seat.Columns, sqlgraph.NewFieldSpec(seat.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.SeatNumber(); ok {
		_spec.SetField(seat.FieldSeatNumber, field.TypeString, value)
	}
	if value, ok := su.mutation.Category(); ok {
		_spec.SetField(seat.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(seat.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seat.RoomTable,
			Columns: []string{seat.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seat.RoomTable,
			Columns: []string{seat.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seat.TicketsTable,
			Columns: []string{seat.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !su.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seat.TicketsTable,
			Columns: []string{seat.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seat.TicketsTable,
			Columns: []string{seat.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SeatUpdateOne is the builder for updating a single Seat entity.
type SeatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SeatMutation
}

// SetSeatNumber sets the "seat_number" field.
func (suo *SeatUpdateOne) SetSeatNumber(s string) *SeatUpdateOne {
	suo.mutation.SetSeatNumber(s)
	return suo
}

// SetNillableSeatNumber sets the "seat_number" field if the given value is not nil.
func (suo *SeatUpdateOne) SetNillableSeatNumber(s *string) *SeatUpdateOne {
	if s != nil {
		suo.SetSeatNumber(*s)
	}
	return suo
}

// SetRoomID sets the "room_id" field.
func (suo *SeatUpdateOne) SetRoomID(u uuid.UUID) *SeatUpdateOne {
	suo.mutation.SetRoomID(u)
	return suo
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (suo *SeatUpdateOne) SetNillableRoomID(u *uuid.UUID) *SeatUpdateOne {
	if u != nil {
		suo.SetRoomID(*u)
	}
	return suo
}

// SetCategory sets the "category" field.
func (suo *SeatUpdateOne) SetCategory(s seat.Category) *SeatUpdateOne {
	suo.mutation.SetCategory(s)
	return suo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (suo *SeatUpdateOne) SetNillableCategory(s *seat.Category) *SeatUpdateOne {
	if s != nil {
		suo.SetCategory(*s)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SeatUpdateOne) SetUpdatedAt(t time.Time) *SeatUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetRoom sets the "room" edge to the Room entity.
func (suo *SeatUpdateOne) SetRoom(r *Room) *SeatUpdateOne {
	return suo.SetRoomID(r.ID)
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (suo *SeatUpdateOne) AddTicketIDs(ids ...uuid.UUID) *SeatUpdateOne {
	suo.mutation.AddTicketIDs(ids...)
	return suo
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (suo *SeatUpdateOne) AddTickets(t ...*Ticket) *SeatUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTicketIDs(ids...)
}

// Mutation returns the SeatMutation object of the builder.
func (suo *SeatUpdateOne) Mutation() *SeatMutation {
	return suo.mutation
}

// ClearRoom clears the "room" edge to the Room entity.
func (suo *SeatUpdateOne) ClearRoom() *SeatUpdateOne {
	suo.mutation.ClearRoom()
	return suo
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (suo *SeatUpdateOne) ClearTickets() *SeatUpdateOne {
	suo.mutation.ClearTickets()
	return suo
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (suo *SeatUpdateOne) RemoveTicketIDs(ids ...uuid.UUID) *SeatUpdateOne {
	suo.mutation.RemoveTicketIDs(ids...)
	return suo
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (suo *SeatUpdateOne) RemoveTickets(t ...*Ticket) *SeatUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTicketIDs(ids...)
}

// Where appends a list predicates to the SeatUpdate builder.
func (suo *SeatUpdateOne) Where(ps ...predicate.Seat) *SeatUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SeatUpdateOne) Select(field string, fields ...string) *SeatUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Seat entity.
func (suo *SeatUpdateOne) Save(ctx context.Context) (*Seat, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SeatUpdateOne) SaveX(ctx context.Context) *Seat {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SeatUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SeatUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SeatUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := seat.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SeatUpdateOne) check() error {
	if v, ok := suo.mutation.Category(); ok {
		if err := seat.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Seat.category": %w`, err)}
		}
	}
	if _, ok := suo.mutation.RoomID(); suo.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Seat.room"`)
	}
	return nil
}

func (suo *SeatUpdateOne) sqlSave(ctx context.Context) (_node *Seat, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(seat.Table, seat.Columns, sqlgraph.NewFieldSpec(seat.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Seat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, seat.FieldID)
		for _, f := range fields {
			if !seat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != seat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.SeatNumber(); ok {
		_spec.SetField(seat.FieldSeatNumber, field.TypeString, value)
	}
	if value, ok := suo.mutation.Category(); ok {
		_spec.SetField(seat.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(seat.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seat.RoomTable,
			Columns: []string{seat.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   seat.RoomTable,
			Columns: []string{seat.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seat.TicketsTable,
			Columns: []string{seat.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !suo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seat.TicketsTable,
			Columns: []string{seat.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seat.TicketsTable,
			Columns: []string{seat.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Seat{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
