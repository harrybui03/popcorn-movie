// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/movie"
	"PopcornMovie/ent/room"
	"PopcornMovie/ent/showtime"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ShowTime is the model entity for the ShowTime schema.
type ShowTime struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt time.Time `json:"start_at,omitempty"`
	// EndAt holds the value of the "end_at" field.
	EndAt time.Time `json:"end_at,omitempty"`
	// MovieID holds the value of the "movie_id" field.
	MovieID uuid.UUID `json:"movie_id,omitempty"`
	// RoomID holds the value of the "room_id" field.
	RoomID uuid.UUID `json:"room_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShowTimeQuery when eager-loading is set.
	Edges        ShowTimeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ShowTimeEdges holds the relations/edges for other nodes in the graph.
type ShowTimeEdges struct {
	// Room holds the value of the room edge.
	Room *Room `json:"room,omitempty"`
	// Movie holds the value of the movie edge.
	Movie *Movie `json:"movie,omitempty"`
	// Tickets holds the value of the tickets edge.
	Tickets []*Ticket `json:"tickets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShowTimeEdges) RoomOrErr() (*Room, error) {
	if e.Room != nil {
		return e.Room, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: room.Label}
	}
	return nil, &NotLoadedError{edge: "room"}
}

// MovieOrErr returns the Movie value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShowTimeEdges) MovieOrErr() (*Movie, error) {
	if e.Movie != nil {
		return e.Movie, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: movie.Label}
	}
	return nil, &NotLoadedError{edge: "movie"}
}

// TicketsOrErr returns the Tickets value or an error if the edge
// was not loaded in eager-loading.
func (e ShowTimeEdges) TicketsOrErr() ([]*Ticket, error) {
	if e.loadedTypes[2] {
		return e.Tickets, nil
	}
	return nil, &NotLoadedError{edge: "tickets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShowTime) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case showtime.FieldStartAt, showtime.FieldEndAt, showtime.FieldCreatedAt, showtime.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case showtime.FieldID, showtime.FieldMovieID, showtime.FieldRoomID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShowTime fields.
func (st *ShowTime) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case showtime.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				st.ID = *value
			}
		case showtime.FieldStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				st.StartAt = value.Time
			}
		case showtime.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				st.EndAt = value.Time
			}
		case showtime.FieldMovieID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field movie_id", values[i])
			} else if value != nil {
				st.MovieID = *value
			}
		case showtime.FieldRoomID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field room_id", values[i])
			} else if value != nil {
				st.RoomID = *value
			}
		case showtime.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				st.CreatedAt = value.Time
			}
		case showtime.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				st.UpdatedAt = value.Time
			}
		default:
			st.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ShowTime.
// This includes values selected through modifiers, order, etc.
func (st *ShowTime) Value(name string) (ent.Value, error) {
	return st.selectValues.Get(name)
}

// QueryRoom queries the "room" edge of the ShowTime entity.
func (st *ShowTime) QueryRoom() *RoomQuery {
	return NewShowTimeClient(st.config).QueryRoom(st)
}

// QueryMovie queries the "movie" edge of the ShowTime entity.
func (st *ShowTime) QueryMovie() *MovieQuery {
	return NewShowTimeClient(st.config).QueryMovie(st)
}

// QueryTickets queries the "tickets" edge of the ShowTime entity.
func (st *ShowTime) QueryTickets() *TicketQuery {
	return NewShowTimeClient(st.config).QueryTickets(st)
}

// Update returns a builder for updating this ShowTime.
// Note that you need to call ShowTime.Unwrap() before calling this method if this ShowTime
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *ShowTime) Update() *ShowTimeUpdateOne {
	return NewShowTimeClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the ShowTime entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *ShowTime) Unwrap() *ShowTime {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShowTime is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *ShowTime) String() string {
	var builder strings.Builder
	builder.WriteString("ShowTime(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("start_at=")
	builder.WriteString(st.StartAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(st.EndAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("movie_id=")
	builder.WriteString(fmt.Sprintf("%v", st.MovieID))
	builder.WriteString(", ")
	builder.WriteString("room_id=")
	builder.WriteString(fmt.Sprintf("%v", st.RoomID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(st.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(st.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ShowTimes is a parsable slice of ShowTime.
type ShowTimes []*ShowTime
