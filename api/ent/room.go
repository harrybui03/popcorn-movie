// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/room"
	"PopcornMovie/ent/theater"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Room is the model entity for the Room schema.
type Room struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// RoomNumber holds the value of the "room_number" field.
	RoomNumber int `json:"room_number,omitempty"`
	// TheaterID holds the value of the "theater_id" field.
	TheaterID uuid.UUID `json:"theater_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoomQuery when eager-loading is set.
	Edges        RoomEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoomEdges holds the relations/edges for other nodes in the graph.
type RoomEdges struct {
	// Theater holds the value of the theater edge.
	Theater *Theater `json:"theater,omitempty"`
	// Seats holds the value of the seats edge.
	Seats []*Seat `json:"seats,omitempty"`
	// ShowTimes holds the value of the showTimes edge.
	ShowTimes []*ShowTime `json:"showTimes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TheaterOrErr returns the Theater value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomEdges) TheaterOrErr() (*Theater, error) {
	if e.Theater != nil {
		return e.Theater, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: theater.Label}
	}
	return nil, &NotLoadedError{edge: "theater"}
}

// SeatsOrErr returns the Seats value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) SeatsOrErr() ([]*Seat, error) {
	if e.loadedTypes[1] {
		return e.Seats, nil
	}
	return nil, &NotLoadedError{edge: "seats"}
}

// ShowTimesOrErr returns the ShowTimes value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) ShowTimesOrErr() ([]*ShowTime, error) {
	if e.loadedTypes[2] {
		return e.ShowTimes, nil
	}
	return nil, &NotLoadedError{edge: "showTimes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Room) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case room.FieldRoomNumber:
			values[i] = new(sql.NullInt64)
		case room.FieldCreatedAt, room.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case room.FieldID, room.FieldTheaterID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Room fields.
func (r *Room) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case room.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case room.FieldRoomNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field room_number", values[i])
			} else if value.Valid {
				r.RoomNumber = int(value.Int64)
			}
		case room.FieldTheaterID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field theater_id", values[i])
			} else if value != nil {
				r.TheaterID = *value
			}
		case room.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case room.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Room.
// This includes values selected through modifiers, order, etc.
func (r *Room) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryTheater queries the "theater" edge of the Room entity.
func (r *Room) QueryTheater() *TheaterQuery {
	return NewRoomClient(r.config).QueryTheater(r)
}

// QuerySeats queries the "seats" edge of the Room entity.
func (r *Room) QuerySeats() *SeatQuery {
	return NewRoomClient(r.config).QuerySeats(r)
}

// QueryShowTimes queries the "showTimes" edge of the Room entity.
func (r *Room) QueryShowTimes() *ShowTimeQuery {
	return NewRoomClient(r.config).QueryShowTimes(r)
}

// Update returns a builder for updating this Room.
// Note that you need to call Room.Unwrap() before calling this method if this Room
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Room) Update() *RoomUpdateOne {
	return NewRoomClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Room entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Room) Unwrap() *Room {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Room is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Room) String() string {
	var builder strings.Builder
	builder.WriteString("Room(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("room_number=")
	builder.WriteString(fmt.Sprintf("%v", r.RoomNumber))
	builder.WriteString(", ")
	builder.WriteString("theater_id=")
	builder.WriteString(fmt.Sprintf("%v", r.TheaterID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Rooms is a parsable slice of Room.
type Rooms []*Room
