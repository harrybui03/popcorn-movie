// Code generated by ent, DO NOT EDIT.

package ticket

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ticket type in the database.
	Label = "ticket"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIsBooked holds the string denoting the is_booked field in the database.
	FieldIsBooked = "is_booked"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldTransactionID holds the string denoting the transaction_id field in the database.
	FieldTransactionID = "transaction_id"
	// FieldSeatID holds the string denoting the seat_id field in the database.
	FieldSeatID = "seat_id"
	// FieldShowTimeID holds the string denoting the show_time_id field in the database.
	FieldShowTimeID = "show_time_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTransaction holds the string denoting the transaction edge name in mutations.
	EdgeTransaction = "transaction"
	// EdgeSeat holds the string denoting the seat edge name in mutations.
	EdgeSeat = "seat"
	// EdgeShowTime holds the string denoting the show_time edge name in mutations.
	EdgeShowTime = "show_time"
	// Table holds the table name of the ticket in the database.
	Table = "tickets"
	// TransactionTable is the table that holds the transaction relation/edge.
	TransactionTable = "tickets"
	// TransactionInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	TransactionInverseTable = "transactions"
	// TransactionColumn is the table column denoting the transaction relation/edge.
	TransactionColumn = "transaction_id"
	// SeatTable is the table that holds the seat relation/edge.
	SeatTable = "tickets"
	// SeatInverseTable is the table name for the Seat entity.
	// It exists in this package in order to avoid circular dependency with the "seat" package.
	SeatInverseTable = "seats"
	// SeatColumn is the table column denoting the seat relation/edge.
	SeatColumn = "seat_id"
	// ShowTimeTable is the table that holds the show_time relation/edge.
	ShowTimeTable = "tickets"
	// ShowTimeInverseTable is the table name for the ShowTime entity.
	// It exists in this package in order to avoid circular dependency with the "showtime" package.
	ShowTimeInverseTable = "show_times"
	// ShowTimeColumn is the table column denoting the show_time relation/edge.
	ShowTimeColumn = "show_time_id"
)

// Columns holds all SQL columns for ticket fields.
var Columns = []string{
	FieldID,
	FieldIsBooked,
	FieldPrice,
	FieldTransactionID,
	FieldSeatID,
	FieldShowTimeID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsBooked holds the default value on creation for the "is_booked" field.
	DefaultIsBooked bool
	// PriceValidator is a validator for the "price" field. It is called by the builders before save.
	PriceValidator func(float64) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Ticket queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIsBooked orders the results by the is_booked field.
func ByIsBooked(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsBooked, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByTransactionID orders the results by the transaction_id field.
func ByTransactionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransactionID, opts...).ToFunc()
}

// BySeatID orders the results by the seat_id field.
func BySeatID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeatID, opts...).ToFunc()
}

// ByShowTimeID orders the results by the show_time_id field.
func ByShowTimeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShowTimeID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTransactionField orders the results by transaction field.
func ByTransactionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransactionStep(), sql.OrderByField(field, opts...))
	}
}

// BySeatField orders the results by seat field.
func BySeatField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeatStep(), sql.OrderByField(field, opts...))
	}
}

// ByShowTimeField orders the results by show_time field.
func ByShowTimeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShowTimeStep(), sql.OrderByField(field, opts...))
	}
}
func newTransactionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransactionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TransactionTable, TransactionColumn),
	)
}
func newSeatStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SeatInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SeatTable, SeatColumn),
	)
}
func newShowTimeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShowTimeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ShowTimeTable, ShowTimeColumn),
	)
}
