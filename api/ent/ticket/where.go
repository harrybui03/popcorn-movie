// Code generated by ent, DO NOT EDIT.

package ticket

import (
	"PopcornMovie/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldID, id))
}

// IsBooked applies equality check predicate on the "is_booked" field. It's identical to IsBookedEQ.
func IsBooked(v bool) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldIsBooked, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldPrice, v))
}

// TransactionID applies equality check predicate on the "transaction_id" field. It's identical to TransactionIDEQ.
func TransactionID(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldTransactionID, v))
}

// SeatID applies equality check predicate on the "seat_id" field. It's identical to SeatIDEQ.
func SeatID(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldSeatID, v))
}

// ShowTimeID applies equality check predicate on the "show_time_id" field. It's identical to ShowTimeIDEQ.
func ShowTimeID(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldShowTimeID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldUpdatedAt, v))
}

// IsBookedEQ applies the EQ predicate on the "is_booked" field.
func IsBookedEQ(v bool) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldIsBooked, v))
}

// IsBookedNEQ applies the NEQ predicate on the "is_booked" field.
func IsBookedNEQ(v bool) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldIsBooked, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldPrice, v))
}

// TransactionIDEQ applies the EQ predicate on the "transaction_id" field.
func TransactionIDEQ(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldTransactionID, v))
}

// TransactionIDNEQ applies the NEQ predicate on the "transaction_id" field.
func TransactionIDNEQ(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldTransactionID, v))
}

// TransactionIDIn applies the In predicate on the "transaction_id" field.
func TransactionIDIn(vs ...uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldTransactionID, vs...))
}

// TransactionIDNotIn applies the NotIn predicate on the "transaction_id" field.
func TransactionIDNotIn(vs ...uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldTransactionID, vs...))
}

// TransactionIDIsNil applies the IsNil predicate on the "transaction_id" field.
func TransactionIDIsNil() predicate.Ticket {
	return predicate.Ticket(sql.FieldIsNull(FieldTransactionID))
}

// TransactionIDNotNil applies the NotNil predicate on the "transaction_id" field.
func TransactionIDNotNil() predicate.Ticket {
	return predicate.Ticket(sql.FieldNotNull(FieldTransactionID))
}

// SeatIDEQ applies the EQ predicate on the "seat_id" field.
func SeatIDEQ(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldSeatID, v))
}

// SeatIDNEQ applies the NEQ predicate on the "seat_id" field.
func SeatIDNEQ(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldSeatID, v))
}

// SeatIDIn applies the In predicate on the "seat_id" field.
func SeatIDIn(vs ...uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldSeatID, vs...))
}

// SeatIDNotIn applies the NotIn predicate on the "seat_id" field.
func SeatIDNotIn(vs ...uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldSeatID, vs...))
}

// ShowTimeIDEQ applies the EQ predicate on the "show_time_id" field.
func ShowTimeIDEQ(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldShowTimeID, v))
}

// ShowTimeIDNEQ applies the NEQ predicate on the "show_time_id" field.
func ShowTimeIDNEQ(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldShowTimeID, v))
}

// ShowTimeIDIn applies the In predicate on the "show_time_id" field.
func ShowTimeIDIn(vs ...uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldShowTimeID, vs...))
}

// ShowTimeIDNotIn applies the NotIn predicate on the "show_time_id" field.
func ShowTimeIDNotIn(vs ...uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldShowTimeID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasTransaction applies the HasEdge predicate on the "transaction" edge.
func HasTransaction() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TransactionTable, TransactionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransactionWith applies the HasEdge predicate on the "transaction" edge with a given conditions (other predicates).
func HasTransactionWith(preds ...predicate.Transaction) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := newTransactionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSeat applies the HasEdge predicate on the "seat" edge.
func HasSeat() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SeatTable, SeatColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeatWith applies the HasEdge predicate on the "seat" edge with a given conditions (other predicates).
func HasSeatWith(preds ...predicate.Seat) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := newSeatStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShowTime applies the HasEdge predicate on the "show_time" edge.
func HasShowTime() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ShowTimeTable, ShowTimeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShowTimeWith applies the HasEdge predicate on the "show_time" edge with a given conditions (other predicates).
func HasShowTimeWith(preds ...predicate.ShowTime) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := newShowTimeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(sql.NotPredicates(p))
}
