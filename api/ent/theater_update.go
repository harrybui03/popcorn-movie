// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/predicate"
	"PopcornMovie/ent/room"
	"PopcornMovie/ent/theater"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TheaterUpdate is the builder for updating Theater entities.
type TheaterUpdate struct {
	config
	hooks    []Hook
	mutation *TheaterMutation
}

// Where appends a list predicates to the TheaterUpdate builder.
func (tu *TheaterUpdate) Where(ps ...predicate.Theater) *TheaterUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetAddress sets the "address" field.
func (tu *TheaterUpdate) SetAddress(s string) *TheaterUpdate {
	tu.mutation.SetAddress(s)
	return tu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (tu *TheaterUpdate) SetNillableAddress(s *string) *TheaterUpdate {
	if s != nil {
		tu.SetAddress(*s)
	}
	return tu
}

// SetName sets the "name" field.
func (tu *TheaterUpdate) SetName(s string) *TheaterUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TheaterUpdate) SetNillableName(s *string) *TheaterUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetPhoneNumber sets the "phone_number" field.
func (tu *TheaterUpdate) SetPhoneNumber(s string) *TheaterUpdate {
	tu.mutation.SetPhoneNumber(s)
	return tu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (tu *TheaterUpdate) SetNillablePhoneNumber(s *string) *TheaterUpdate {
	if s != nil {
		tu.SetPhoneNumber(*s)
	}
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TheaterUpdate) SetUpdatedAt(t time.Time) *TheaterUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// AddRoomIDs adds the "rooms" edge to the Room entity by IDs.
func (tu *TheaterUpdate) AddRoomIDs(ids ...int) *TheaterUpdate {
	tu.mutation.AddRoomIDs(ids...)
	return tu
}

// AddRooms adds the "rooms" edges to the Room entity.
func (tu *TheaterUpdate) AddRooms(r ...*Room) *TheaterUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tu.AddRoomIDs(ids...)
}

// Mutation returns the TheaterMutation object of the builder.
func (tu *TheaterUpdate) Mutation() *TheaterMutation {
	return tu.mutation
}

// ClearRooms clears all "rooms" edges to the Room entity.
func (tu *TheaterUpdate) ClearRooms() *TheaterUpdate {
	tu.mutation.ClearRooms()
	return tu
}

// RemoveRoomIDs removes the "rooms" edge to Room entities by IDs.
func (tu *TheaterUpdate) RemoveRoomIDs(ids ...int) *TheaterUpdate {
	tu.mutation.RemoveRoomIDs(ids...)
	return tu
}

// RemoveRooms removes "rooms" edges to Room entities.
func (tu *TheaterUpdate) RemoveRooms(r ...*Room) *TheaterUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tu.RemoveRoomIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TheaterUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TheaterUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TheaterUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TheaterUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TheaterUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := theater.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

func (tu *TheaterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(theater.Table, theater.Columns, sqlgraph.NewFieldSpec(theater.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Address(); ok {
		_spec.SetField(theater.FieldAddress, field.TypeString, value)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(theater.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.PhoneNumber(); ok {
		_spec.SetField(theater.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(theater.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theater.RoomsTable,
			Columns: []string{theater.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedRoomsIDs(); len(nodes) > 0 && !tu.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theater.RoomsTable,
			Columns: []string{theater.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theater.RoomsTable,
			Columns: []string{theater.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{theater.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TheaterUpdateOne is the builder for updating a single Theater entity.
type TheaterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TheaterMutation
}

// SetAddress sets the "address" field.
func (tuo *TheaterUpdateOne) SetAddress(s string) *TheaterUpdateOne {
	tuo.mutation.SetAddress(s)
	return tuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (tuo *TheaterUpdateOne) SetNillableAddress(s *string) *TheaterUpdateOne {
	if s != nil {
		tuo.SetAddress(*s)
	}
	return tuo
}

// SetName sets the "name" field.
func (tuo *TheaterUpdateOne) SetName(s string) *TheaterUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TheaterUpdateOne) SetNillableName(s *string) *TheaterUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetPhoneNumber sets the "phone_number" field.
func (tuo *TheaterUpdateOne) SetPhoneNumber(s string) *TheaterUpdateOne {
	tuo.mutation.SetPhoneNumber(s)
	return tuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (tuo *TheaterUpdateOne) SetNillablePhoneNumber(s *string) *TheaterUpdateOne {
	if s != nil {
		tuo.SetPhoneNumber(*s)
	}
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TheaterUpdateOne) SetUpdatedAt(t time.Time) *TheaterUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// AddRoomIDs adds the "rooms" edge to the Room entity by IDs.
func (tuo *TheaterUpdateOne) AddRoomIDs(ids ...int) *TheaterUpdateOne {
	tuo.mutation.AddRoomIDs(ids...)
	return tuo
}

// AddRooms adds the "rooms" edges to the Room entity.
func (tuo *TheaterUpdateOne) AddRooms(r ...*Room) *TheaterUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tuo.AddRoomIDs(ids...)
}

// Mutation returns the TheaterMutation object of the builder.
func (tuo *TheaterUpdateOne) Mutation() *TheaterMutation {
	return tuo.mutation
}

// ClearRooms clears all "rooms" edges to the Room entity.
func (tuo *TheaterUpdateOne) ClearRooms() *TheaterUpdateOne {
	tuo.mutation.ClearRooms()
	return tuo
}

// RemoveRoomIDs removes the "rooms" edge to Room entities by IDs.
func (tuo *TheaterUpdateOne) RemoveRoomIDs(ids ...int) *TheaterUpdateOne {
	tuo.mutation.RemoveRoomIDs(ids...)
	return tuo
}

// RemoveRooms removes "rooms" edges to Room entities.
func (tuo *TheaterUpdateOne) RemoveRooms(r ...*Room) *TheaterUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tuo.RemoveRoomIDs(ids...)
}

// Where appends a list predicates to the TheaterUpdate builder.
func (tuo *TheaterUpdateOne) Where(ps ...predicate.Theater) *TheaterUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TheaterUpdateOne) Select(field string, fields ...string) *TheaterUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Theater entity.
func (tuo *TheaterUpdateOne) Save(ctx context.Context) (*Theater, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TheaterUpdateOne) SaveX(ctx context.Context) *Theater {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TheaterUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TheaterUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TheaterUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := theater.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

func (tuo *TheaterUpdateOne) sqlSave(ctx context.Context) (_node *Theater, err error) {
	_spec := sqlgraph.NewUpdateSpec(theater.Table, theater.Columns, sqlgraph.NewFieldSpec(theater.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Theater.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, theater.FieldID)
		for _, f := range fields {
			if !theater.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != theater.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Address(); ok {
		_spec.SetField(theater.FieldAddress, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(theater.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.PhoneNumber(); ok {
		_spec.SetField(theater.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(theater.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theater.RoomsTable,
			Columns: []string{theater.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedRoomsIDs(); len(nodes) > 0 && !tuo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theater.RoomsTable,
			Columns: []string{theater.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   theater.RoomsTable,
			Columns: []string{theater.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Theater{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{theater.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
