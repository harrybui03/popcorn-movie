// Code generated by ent, DO NOT EDIT.

package movie

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the movie type in the database.
	Label = "movie"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldGenre holds the string denoting the genre field in the database.
	FieldGenre = "genre"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldDirector holds the string denoting the director field in the database.
	FieldDirector = "director"
	// FieldCast holds the string denoting the cast field in the database.
	FieldCast = "cast"
	// FieldPoster holds the string denoting the poster field in the database.
	FieldPoster = "poster"
	// FieldRated holds the string denoting the rated field in the database.
	FieldRated = "rated"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldTrailer holds the string denoting the trailer field in the database.
	FieldTrailer = "trailer"
	// FieldOpeningDay holds the string denoting the opening_day field in the database.
	FieldOpeningDay = "opening_day"
	// FieldStory holds the string denoting the story field in the database.
	FieldStory = "story"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeShowTimes holds the string denoting the showtimes edge name in mutations.
	EdgeShowTimes = "showTimes"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// Table holds the table name of the movie in the database.
	Table = "movies"
	// ShowTimesTable is the table that holds the showTimes relation/edge.
	ShowTimesTable = "show_times"
	// ShowTimesInverseTable is the table name for the ShowTime entity.
	// It exists in this package in order to avoid circular dependency with the "showtime" package.
	ShowTimesInverseTable = "show_times"
	// ShowTimesColumn is the table column denoting the showTimes relation/edge.
	ShowTimesColumn = "movie_id"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "comments"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "comments"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "movie_id"
)

// Columns holds all SQL columns for movie fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldGenre,
	FieldStatus,
	FieldLanguage,
	FieldDirector,
	FieldCast,
	FieldPoster,
	FieldRated,
	FieldDuration,
	FieldTrailer,
	FieldOpeningDay,
	FieldStory,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusUPCOMING Status = "UPCOMING"
	StatusONGOING  Status = "ONGOING"
	StatusOVER     Status = "OVER"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusUPCOMING, StatusONGOING, StatusOVER:
		return nil
	default:
		return fmt.Errorf("movie: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Movie queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByGenre orders the results by the genre field.
func ByGenre(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenre, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByDirector orders the results by the director field.
func ByDirector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDirector, opts...).ToFunc()
}

// ByCast orders the results by the cast field.
func ByCast(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCast, opts...).ToFunc()
}

// ByPoster orders the results by the poster field.
func ByPoster(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoster, opts...).ToFunc()
}

// ByRated orders the results by the rated field.
func ByRated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRated, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByTrailer orders the results by the trailer field.
func ByTrailer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrailer, opts...).ToFunc()
}

// ByOpeningDay orders the results by the opening_day field.
func ByOpeningDay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpeningDay, opts...).ToFunc()
}

// ByStory orders the results by the story field.
func ByStory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStory, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByShowTimesCount orders the results by showTimes count.
func ByShowTimesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShowTimesStep(), opts...)
	}
}

// ByShowTimes orders the results by showTimes terms.
func ByShowTimes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShowTimesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommentsCount orders the results by comments count.
func ByCommentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentsStep(), opts...)
	}
}

// ByComments orders the results by comments terms.
func ByComments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newShowTimesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShowTimesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ShowTimesTable, ShowTimesColumn),
	)
}
func newCommentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
	)
}
