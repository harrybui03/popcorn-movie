// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/resetpassword"
	"PopcornMovie/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ResetPasswordCreate is the builder for creating a ResetPassword entity.
type ResetPasswordCreate struct {
	config
	mutation *ResetPasswordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (rpc *ResetPasswordCreate) SetUserID(u uuid.UUID) *ResetPasswordCreate {
	rpc.mutation.SetUserID(u)
	return rpc
}

// SetCreatedAt sets the "created_at" field.
func (rpc *ResetPasswordCreate) SetCreatedAt(t time.Time) *ResetPasswordCreate {
	rpc.mutation.SetCreatedAt(t)
	return rpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rpc *ResetPasswordCreate) SetNillableCreatedAt(t *time.Time) *ResetPasswordCreate {
	if t != nil {
		rpc.SetCreatedAt(*t)
	}
	return rpc
}

// SetID sets the "id" field.
func (rpc *ResetPasswordCreate) SetID(u uuid.UUID) *ResetPasswordCreate {
	rpc.mutation.SetID(u)
	return rpc
}

// SetUser sets the "user" edge to the User entity.
func (rpc *ResetPasswordCreate) SetUser(u *User) *ResetPasswordCreate {
	return rpc.SetUserID(u.ID)
}

// Mutation returns the ResetPasswordMutation object of the builder.
func (rpc *ResetPasswordCreate) Mutation() *ResetPasswordMutation {
	return rpc.mutation
}

// Save creates the ResetPassword in the database.
func (rpc *ResetPasswordCreate) Save(ctx context.Context) (*ResetPassword, error) {
	rpc.defaults()
	return withHooks(ctx, rpc.sqlSave, rpc.mutation, rpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rpc *ResetPasswordCreate) SaveX(ctx context.Context) *ResetPassword {
	v, err := rpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpc *ResetPasswordCreate) Exec(ctx context.Context) error {
	_, err := rpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpc *ResetPasswordCreate) ExecX(ctx context.Context) {
	if err := rpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpc *ResetPasswordCreate) defaults() {
	if _, ok := rpc.mutation.CreatedAt(); !ok {
		v := resetpassword.DefaultCreatedAt()
		rpc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpc *ResetPasswordCreate) check() error {
	if _, ok := rpc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ResetPassword.user_id"`)}
	}
	if _, ok := rpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ResetPassword.created_at"`)}
	}
	if _, ok := rpc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ResetPassword.user"`)}
	}
	return nil
}

func (rpc *ResetPasswordCreate) sqlSave(ctx context.Context) (*ResetPassword, error) {
	if err := rpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rpc.mutation.id = &_node.ID
	rpc.mutation.done = true
	return _node, nil
}

func (rpc *ResetPasswordCreate) createSpec() (*ResetPassword, *sqlgraph.CreateSpec) {
	var (
		_node = &ResetPassword{config: rpc.config}
		_spec = sqlgraph.NewCreateSpec(resetpassword.Table, sqlgraph.NewFieldSpec(resetpassword.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rpc.conflict
	if id, ok := rpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rpc.mutation.CreatedAt(); ok {
		_spec.SetField(resetpassword.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := rpc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resetpassword.UserTable,
			Columns: []string{resetpassword.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResetPassword.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResetPasswordUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (rpc *ResetPasswordCreate) OnConflict(opts ...sql.ConflictOption) *ResetPasswordUpsertOne {
	rpc.conflict = opts
	return &ResetPasswordUpsertOne{
		create: rpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResetPassword.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rpc *ResetPasswordCreate) OnConflictColumns(columns ...string) *ResetPasswordUpsertOne {
	rpc.conflict = append(rpc.conflict, sql.ConflictColumns(columns...))
	return &ResetPasswordUpsertOne{
		create: rpc,
	}
}

type (
	// ResetPasswordUpsertOne is the builder for "upsert"-ing
	//  one ResetPassword node.
	ResetPasswordUpsertOne struct {
		create *ResetPasswordCreate
	}

	// ResetPasswordUpsert is the "OnConflict" setter.
	ResetPasswordUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *ResetPasswordUpsert) SetUserID(v uuid.UUID) *ResetPasswordUpsert {
	u.Set(resetpassword.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ResetPasswordUpsert) UpdateUserID() *ResetPasswordUpsert {
	u.SetExcluded(resetpassword.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ResetPassword.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resetpassword.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResetPasswordUpsertOne) UpdateNewValues() *ResetPasswordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(resetpassword.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(resetpassword.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResetPassword.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResetPasswordUpsertOne) Ignore() *ResetPasswordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResetPasswordUpsertOne) DoNothing() *ResetPasswordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResetPasswordCreate.OnConflict
// documentation for more info.
func (u *ResetPasswordUpsertOne) Update(set func(*ResetPasswordUpsert)) *ResetPasswordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResetPasswordUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *ResetPasswordUpsertOne) SetUserID(v uuid.UUID) *ResetPasswordUpsertOne {
	return u.Update(func(s *ResetPasswordUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ResetPasswordUpsertOne) UpdateUserID() *ResetPasswordUpsertOne {
	return u.Update(func(s *ResetPasswordUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *ResetPasswordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ResetPasswordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResetPasswordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResetPasswordUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ResetPasswordUpsertOne.ID is not supported by MySQL driver. Use ResetPasswordUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResetPasswordUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResetPasswordCreateBulk is the builder for creating many ResetPassword entities in bulk.
type ResetPasswordCreateBulk struct {
	config
	err      error
	builders []*ResetPasswordCreate
	conflict []sql.ConflictOption
}

// Save creates the ResetPassword entities in the database.
func (rpcb *ResetPasswordCreateBulk) Save(ctx context.Context) ([]*ResetPassword, error) {
	if rpcb.err != nil {
		return nil, rpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rpcb.builders))
	nodes := make([]*ResetPassword, len(rpcb.builders))
	mutators := make([]Mutator, len(rpcb.builders))
	for i := range rpcb.builders {
		func(i int, root context.Context) {
			builder := rpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResetPasswordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rpcb *ResetPasswordCreateBulk) SaveX(ctx context.Context) []*ResetPassword {
	v, err := rpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpcb *ResetPasswordCreateBulk) Exec(ctx context.Context) error {
	_, err := rpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpcb *ResetPasswordCreateBulk) ExecX(ctx context.Context) {
	if err := rpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ResetPassword.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResetPasswordUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (rpcb *ResetPasswordCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResetPasswordUpsertBulk {
	rpcb.conflict = opts
	return &ResetPasswordUpsertBulk{
		create: rpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ResetPassword.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rpcb *ResetPasswordCreateBulk) OnConflictColumns(columns ...string) *ResetPasswordUpsertBulk {
	rpcb.conflict = append(rpcb.conflict, sql.ConflictColumns(columns...))
	return &ResetPasswordUpsertBulk{
		create: rpcb,
	}
}

// ResetPasswordUpsertBulk is the builder for "upsert"-ing
// a bulk of ResetPassword nodes.
type ResetPasswordUpsertBulk struct {
	create *ResetPasswordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ResetPassword.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(resetpassword.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResetPasswordUpsertBulk) UpdateNewValues() *ResetPasswordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(resetpassword.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(resetpassword.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ResetPassword.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResetPasswordUpsertBulk) Ignore() *ResetPasswordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResetPasswordUpsertBulk) DoNothing() *ResetPasswordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResetPasswordCreateBulk.OnConflict
// documentation for more info.
func (u *ResetPasswordUpsertBulk) Update(set func(*ResetPasswordUpsert)) *ResetPasswordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResetPasswordUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *ResetPasswordUpsertBulk) SetUserID(v uuid.UUID) *ResetPasswordUpsertBulk {
	return u.Update(func(s *ResetPasswordUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ResetPasswordUpsertBulk) UpdateUserID() *ResetPasswordUpsertBulk {
	return u.Update(func(s *ResetPasswordUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *ResetPasswordUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ResetPasswordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ResetPasswordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResetPasswordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
