// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/predicate"
	"PopcornMovie/ent/seat"
	"PopcornMovie/ent/showtime"
	"PopcornMovie/ent/ticket"
	"PopcornMovie/ent/transaction"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TicketUpdate is the builder for updating Ticket entities.
type TicketUpdate struct {
	config
	hooks    []Hook
	mutation *TicketMutation
}

// Where appends a list predicates to the TicketUpdate builder.
func (tu *TicketUpdate) Where(ps ...predicate.Ticket) *TicketUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetIsBooked sets the "is_booked" field.
func (tu *TicketUpdate) SetIsBooked(b bool) *TicketUpdate {
	tu.mutation.SetIsBooked(b)
	return tu
}

// SetNillableIsBooked sets the "is_booked" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableIsBooked(b *bool) *TicketUpdate {
	if b != nil {
		tu.SetIsBooked(*b)
	}
	return tu
}

// SetPrice sets the "price" field.
func (tu *TicketUpdate) SetPrice(f float64) *TicketUpdate {
	tu.mutation.ResetPrice()
	tu.mutation.SetPrice(f)
	return tu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (tu *TicketUpdate) SetNillablePrice(f *float64) *TicketUpdate {
	if f != nil {
		tu.SetPrice(*f)
	}
	return tu
}

// AddPrice adds f to the "price" field.
func (tu *TicketUpdate) AddPrice(f float64) *TicketUpdate {
	tu.mutation.AddPrice(f)
	return tu
}

// SetTransactionID sets the "transaction_id" field.
func (tu *TicketUpdate) SetTransactionID(u uuid.UUID) *TicketUpdate {
	tu.mutation.SetTransactionID(u)
	return tu
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableTransactionID(u *uuid.UUID) *TicketUpdate {
	if u != nil {
		tu.SetTransactionID(*u)
	}
	return tu
}

// SetSeatID sets the "seat_id" field.
func (tu *TicketUpdate) SetSeatID(u uuid.UUID) *TicketUpdate {
	tu.mutation.SetSeatID(u)
	return tu
}

// SetNillableSeatID sets the "seat_id" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableSeatID(u *uuid.UUID) *TicketUpdate {
	if u != nil {
		tu.SetSeatID(*u)
	}
	return tu
}

// SetShowTimeID sets the "show_time_id" field.
func (tu *TicketUpdate) SetShowTimeID(u uuid.UUID) *TicketUpdate {
	tu.mutation.SetShowTimeID(u)
	return tu
}

// SetNillableShowTimeID sets the "show_time_id" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableShowTimeID(u *uuid.UUID) *TicketUpdate {
	if u != nil {
		tu.SetShowTimeID(*u)
	}
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TicketUpdate) SetUpdatedAt(t time.Time) *TicketUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetTransaction sets the "transaction" edge to the Transaction entity.
func (tu *TicketUpdate) SetTransaction(t *Transaction) *TicketUpdate {
	return tu.SetTransactionID(t.ID)
}

// SetSeat sets the "seat" edge to the Seat entity.
func (tu *TicketUpdate) SetSeat(s *Seat) *TicketUpdate {
	return tu.SetSeatID(s.ID)
}

// SetShowTime sets the "show_time" edge to the ShowTime entity.
func (tu *TicketUpdate) SetShowTime(s *ShowTime) *TicketUpdate {
	return tu.SetShowTimeID(s.ID)
}

// Mutation returns the TicketMutation object of the builder.
func (tu *TicketUpdate) Mutation() *TicketMutation {
	return tu.mutation
}

// ClearTransaction clears the "transaction" edge to the Transaction entity.
func (tu *TicketUpdate) ClearTransaction() *TicketUpdate {
	tu.mutation.ClearTransaction()
	return tu
}

// ClearSeat clears the "seat" edge to the Seat entity.
func (tu *TicketUpdate) ClearSeat() *TicketUpdate {
	tu.mutation.ClearSeat()
	return tu
}

// ClearShowTime clears the "show_time" edge to the ShowTime entity.
func (tu *TicketUpdate) ClearShowTime() *TicketUpdate {
	tu.mutation.ClearShowTime()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TicketUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TicketUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TicketUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TicketUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TicketUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := ticket.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TicketUpdate) check() error {
	if v, ok := tu.mutation.Price(); ok {
		if err := ticket.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Ticket.price": %w`, err)}
		}
	}
	if _, ok := tu.mutation.TransactionID(); tu.mutation.TransactionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Ticket.transaction"`)
	}
	if _, ok := tu.mutation.SeatID(); tu.mutation.SeatCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Ticket.seat"`)
	}
	if _, ok := tu.mutation.ShowTimeID(); tu.mutation.ShowTimeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Ticket.show_time"`)
	}
	return nil
}

func (tu *TicketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ticket.Table, ticket.Columns, sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.IsBooked(); ok {
		_spec.SetField(ticket.FieldIsBooked, field.TypeBool, value)
	}
	if value, ok := tu.mutation.Price(); ok {
		_spec.SetField(ticket.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedPrice(); ok {
		_spec.AddField(ticket.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(ticket.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.TransactionTable,
			Columns: []string{ticket.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.TransactionTable,
			Columns: []string{ticket.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.SeatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.SeatTable,
			Columns: []string{ticket.SeatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SeatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.SeatTable,
			Columns: []string{ticket.SeatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ShowTimeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.ShowTimeTable,
			Columns: []string{ticket.ShowTimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(showtime.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ShowTimeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.ShowTimeTable,
			Columns: []string{ticket.ShowTimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(showtime.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TicketUpdateOne is the builder for updating a single Ticket entity.
type TicketUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TicketMutation
}

// SetIsBooked sets the "is_booked" field.
func (tuo *TicketUpdateOne) SetIsBooked(b bool) *TicketUpdateOne {
	tuo.mutation.SetIsBooked(b)
	return tuo
}

// SetNillableIsBooked sets the "is_booked" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableIsBooked(b *bool) *TicketUpdateOne {
	if b != nil {
		tuo.SetIsBooked(*b)
	}
	return tuo
}

// SetPrice sets the "price" field.
func (tuo *TicketUpdateOne) SetPrice(f float64) *TicketUpdateOne {
	tuo.mutation.ResetPrice()
	tuo.mutation.SetPrice(f)
	return tuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillablePrice(f *float64) *TicketUpdateOne {
	if f != nil {
		tuo.SetPrice(*f)
	}
	return tuo
}

// AddPrice adds f to the "price" field.
func (tuo *TicketUpdateOne) AddPrice(f float64) *TicketUpdateOne {
	tuo.mutation.AddPrice(f)
	return tuo
}

// SetTransactionID sets the "transaction_id" field.
func (tuo *TicketUpdateOne) SetTransactionID(u uuid.UUID) *TicketUpdateOne {
	tuo.mutation.SetTransactionID(u)
	return tuo
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableTransactionID(u *uuid.UUID) *TicketUpdateOne {
	if u != nil {
		tuo.SetTransactionID(*u)
	}
	return tuo
}

// SetSeatID sets the "seat_id" field.
func (tuo *TicketUpdateOne) SetSeatID(u uuid.UUID) *TicketUpdateOne {
	tuo.mutation.SetSeatID(u)
	return tuo
}

// SetNillableSeatID sets the "seat_id" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableSeatID(u *uuid.UUID) *TicketUpdateOne {
	if u != nil {
		tuo.SetSeatID(*u)
	}
	return tuo
}

// SetShowTimeID sets the "show_time_id" field.
func (tuo *TicketUpdateOne) SetShowTimeID(u uuid.UUID) *TicketUpdateOne {
	tuo.mutation.SetShowTimeID(u)
	return tuo
}

// SetNillableShowTimeID sets the "show_time_id" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableShowTimeID(u *uuid.UUID) *TicketUpdateOne {
	if u != nil {
		tuo.SetShowTimeID(*u)
	}
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TicketUpdateOne) SetUpdatedAt(t time.Time) *TicketUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetTransaction sets the "transaction" edge to the Transaction entity.
func (tuo *TicketUpdateOne) SetTransaction(t *Transaction) *TicketUpdateOne {
	return tuo.SetTransactionID(t.ID)
}

// SetSeat sets the "seat" edge to the Seat entity.
func (tuo *TicketUpdateOne) SetSeat(s *Seat) *TicketUpdateOne {
	return tuo.SetSeatID(s.ID)
}

// SetShowTime sets the "show_time" edge to the ShowTime entity.
func (tuo *TicketUpdateOne) SetShowTime(s *ShowTime) *TicketUpdateOne {
	return tuo.SetShowTimeID(s.ID)
}

// Mutation returns the TicketMutation object of the builder.
func (tuo *TicketUpdateOne) Mutation() *TicketMutation {
	return tuo.mutation
}

// ClearTransaction clears the "transaction" edge to the Transaction entity.
func (tuo *TicketUpdateOne) ClearTransaction() *TicketUpdateOne {
	tuo.mutation.ClearTransaction()
	return tuo
}

// ClearSeat clears the "seat" edge to the Seat entity.
func (tuo *TicketUpdateOne) ClearSeat() *TicketUpdateOne {
	tuo.mutation.ClearSeat()
	return tuo
}

// ClearShowTime clears the "show_time" edge to the ShowTime entity.
func (tuo *TicketUpdateOne) ClearShowTime() *TicketUpdateOne {
	tuo.mutation.ClearShowTime()
	return tuo
}

// Where appends a list predicates to the TicketUpdate builder.
func (tuo *TicketUpdateOne) Where(ps ...predicate.Ticket) *TicketUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TicketUpdateOne) Select(field string, fields ...string) *TicketUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Ticket entity.
func (tuo *TicketUpdateOne) Save(ctx context.Context) (*Ticket, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TicketUpdateOne) SaveX(ctx context.Context) *Ticket {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TicketUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TicketUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TicketUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := ticket.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TicketUpdateOne) check() error {
	if v, ok := tuo.mutation.Price(); ok {
		if err := ticket.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "Ticket.price": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.TransactionID(); tuo.mutation.TransactionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Ticket.transaction"`)
	}
	if _, ok := tuo.mutation.SeatID(); tuo.mutation.SeatCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Ticket.seat"`)
	}
	if _, ok := tuo.mutation.ShowTimeID(); tuo.mutation.ShowTimeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Ticket.show_time"`)
	}
	return nil
}

func (tuo *TicketUpdateOne) sqlSave(ctx context.Context) (_node *Ticket, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ticket.Table, ticket.Columns, sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ticket.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ticket.FieldID)
		for _, f := range fields {
			if !ticket.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ticket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.IsBooked(); ok {
		_spec.SetField(ticket.FieldIsBooked, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.Price(); ok {
		_spec.SetField(ticket.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedPrice(); ok {
		_spec.AddField(ticket.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(ticket.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.TransactionTable,
			Columns: []string{ticket.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.TransactionTable,
			Columns: []string{ticket.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.SeatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.SeatTable,
			Columns: []string{ticket.SeatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SeatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.SeatTable,
			Columns: []string{ticket.SeatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ShowTimeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.ShowTimeTable,
			Columns: []string{ticket.ShowTimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(showtime.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ShowTimeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.ShowTimeTable,
			Columns: []string{ticket.ShowTimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(showtime.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ticket{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
