// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/food"
	"PopcornMovie/ent/foodorderline"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FoodCreate is the builder for creating a Food entity.
type FoodCreate struct {
	config
	mutation *FoodMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (fc *FoodCreate) SetName(s string) *FoodCreate {
	fc.mutation.SetName(s)
	return fc
}

// SetPrice sets the "price" field.
func (fc *FoodCreate) SetPrice(f float64) *FoodCreate {
	fc.mutation.SetPrice(f)
	return fc
}

// SetImage sets the "image" field.
func (fc *FoodCreate) SetImage(s string) *FoodCreate {
	fc.mutation.SetImage(s)
	return fc
}

// SetCreatedAt sets the "created_at" field.
func (fc *FoodCreate) SetCreatedAt(t time.Time) *FoodCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FoodCreate) SetNillableCreatedAt(t *time.Time) *FoodCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FoodCreate) SetUpdatedAt(t time.Time) *FoodCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FoodCreate) SetNillableUpdatedAt(t *time.Time) *FoodCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FoodCreate) SetID(u uuid.UUID) *FoodCreate {
	fc.mutation.SetID(u)
	return fc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fc *FoodCreate) SetNillableID(u *uuid.UUID) *FoodCreate {
	if u != nil {
		fc.SetID(*u)
	}
	return fc
}

// AddFoodOrderLineIDs adds the "food_order_lines" edge to the FoodOrderLine entity by IDs.
func (fc *FoodCreate) AddFoodOrderLineIDs(ids ...uuid.UUID) *FoodCreate {
	fc.mutation.AddFoodOrderLineIDs(ids...)
	return fc
}

// AddFoodOrderLines adds the "food_order_lines" edges to the FoodOrderLine entity.
func (fc *FoodCreate) AddFoodOrderLines(f ...*FoodOrderLine) *FoodCreate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fc.AddFoodOrderLineIDs(ids...)
}

// Mutation returns the FoodMutation object of the builder.
func (fc *FoodCreate) Mutation() *FoodMutation {
	return fc.mutation
}

// Save creates the Food in the database.
func (fc *FoodCreate) Save(ctx context.Context) (*Food, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FoodCreate) SaveX(ctx context.Context) *Food {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FoodCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FoodCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FoodCreate) defaults() {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := food.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		v := food.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fc.mutation.ID(); !ok {
		v := food.DefaultID()
		fc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FoodCreate) check() error {
	if _, ok := fc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Food.name"`)}
	}
	if _, ok := fc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Food.price"`)}
	}
	if _, ok := fc.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "Food.image"`)}
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Food.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Food.updated_at"`)}
	}
	return nil
}

func (fc *FoodCreate) sqlSave(ctx context.Context) (*Food, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FoodCreate) createSpec() (*Food, *sqlgraph.CreateSpec) {
	var (
		_node = &Food{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(food.Table, sqlgraph.NewFieldSpec(food.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = fc.conflict
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fc.mutation.Name(); ok {
		_spec.SetField(food.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fc.mutation.Price(); ok {
		_spec.SetField(food.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := fc.mutation.Image(); ok {
		_spec.SetField(food.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(food.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(food.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := fc.mutation.FoodOrderLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   food.FoodOrderLinesTable,
			Columns: []string{food.FoodOrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodorderline.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Food.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FoodUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (fc *FoodCreate) OnConflict(opts ...sql.ConflictOption) *FoodUpsertOne {
	fc.conflict = opts
	return &FoodUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Food.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *FoodCreate) OnConflictColumns(columns ...string) *FoodUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FoodUpsertOne{
		create: fc,
	}
}

type (
	// FoodUpsertOne is the builder for "upsert"-ing
	//  one Food node.
	FoodUpsertOne struct {
		create *FoodCreate
	}

	// FoodUpsert is the "OnConflict" setter.
	FoodUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *FoodUpsert) SetName(v string) *FoodUpsert {
	u.Set(food.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FoodUpsert) UpdateName() *FoodUpsert {
	u.SetExcluded(food.FieldName)
	return u
}

// SetPrice sets the "price" field.
func (u *FoodUpsert) SetPrice(v float64) *FoodUpsert {
	u.Set(food.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *FoodUpsert) UpdatePrice() *FoodUpsert {
	u.SetExcluded(food.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *FoodUpsert) AddPrice(v float64) *FoodUpsert {
	u.Add(food.FieldPrice, v)
	return u
}

// SetImage sets the "image" field.
func (u *FoodUpsert) SetImage(v string) *FoodUpsert {
	u.Set(food.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *FoodUpsert) UpdateImage() *FoodUpsert {
	u.SetExcluded(food.FieldImage)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FoodUpsert) SetUpdatedAt(v time.Time) *FoodUpsert {
	u.Set(food.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FoodUpsert) UpdateUpdatedAt() *FoodUpsert {
	u.SetExcluded(food.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Food.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(food.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FoodUpsertOne) UpdateNewValues() *FoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(food.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(food.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Food.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FoodUpsertOne) Ignore() *FoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FoodUpsertOne) DoNothing() *FoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FoodCreate.OnConflict
// documentation for more info.
func (u *FoodUpsertOne) Update(set func(*FoodUpsert)) *FoodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FoodUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *FoodUpsertOne) SetName(v string) *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FoodUpsertOne) UpdateName() *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateName()
	})
}

// SetPrice sets the "price" field.
func (u *FoodUpsertOne) SetPrice(v float64) *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *FoodUpsertOne) AddPrice(v float64) *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *FoodUpsertOne) UpdatePrice() *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.UpdatePrice()
	})
}

// SetImage sets the "image" field.
func (u *FoodUpsertOne) SetImage(v string) *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *FoodUpsertOne) UpdateImage() *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateImage()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FoodUpsertOne) SetUpdatedAt(v time.Time) *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FoodUpsertOne) UpdateUpdatedAt() *FoodUpsertOne {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *FoodUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FoodCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FoodUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FoodUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: FoodUpsertOne.ID is not supported by MySQL driver. Use FoodUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FoodUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FoodCreateBulk is the builder for creating many Food entities in bulk.
type FoodCreateBulk struct {
	config
	err      error
	builders []*FoodCreate
	conflict []sql.ConflictOption
}

// Save creates the Food entities in the database.
func (fcb *FoodCreateBulk) Save(ctx context.Context) ([]*Food, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Food, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FoodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FoodCreateBulk) SaveX(ctx context.Context) []*Food {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FoodCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FoodCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Food.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FoodUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (fcb *FoodCreateBulk) OnConflict(opts ...sql.ConflictOption) *FoodUpsertBulk {
	fcb.conflict = opts
	return &FoodUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Food.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *FoodCreateBulk) OnConflictColumns(columns ...string) *FoodUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FoodUpsertBulk{
		create: fcb,
	}
}

// FoodUpsertBulk is the builder for "upsert"-ing
// a bulk of Food nodes.
type FoodUpsertBulk struct {
	create *FoodCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Food.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(food.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FoodUpsertBulk) UpdateNewValues() *FoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(food.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(food.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Food.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FoodUpsertBulk) Ignore() *FoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FoodUpsertBulk) DoNothing() *FoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FoodCreateBulk.OnConflict
// documentation for more info.
func (u *FoodUpsertBulk) Update(set func(*FoodUpsert)) *FoodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FoodUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *FoodUpsertBulk) SetName(v string) *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FoodUpsertBulk) UpdateName() *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateName()
	})
}

// SetPrice sets the "price" field.
func (u *FoodUpsertBulk) SetPrice(v float64) *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *FoodUpsertBulk) AddPrice(v float64) *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *FoodUpsertBulk) UpdatePrice() *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.UpdatePrice()
	})
}

// SetImage sets the "image" field.
func (u *FoodUpsertBulk) SetImage(v string) *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *FoodUpsertBulk) UpdateImage() *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateImage()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FoodUpsertBulk) SetUpdatedAt(v time.Time) *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FoodUpsertBulk) UpdateUpdatedAt() *FoodUpsertBulk {
	return u.Update(func(s *FoodUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *FoodUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FoodCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FoodCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FoodUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
