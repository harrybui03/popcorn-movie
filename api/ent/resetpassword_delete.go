// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/predicate"
	"PopcornMovie/ent/resetpassword"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ResetPasswordDelete is the builder for deleting a ResetPassword entity.
type ResetPasswordDelete struct {
	config
	hooks    []Hook
	mutation *ResetPasswordMutation
}

// Where appends a list predicates to the ResetPasswordDelete builder.
func (rpd *ResetPasswordDelete) Where(ps ...predicate.ResetPassword) *ResetPasswordDelete {
	rpd.mutation.Where(ps...)
	return rpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rpd *ResetPasswordDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rpd.sqlExec, rpd.mutation, rpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rpd *ResetPasswordDelete) ExecX(ctx context.Context) int {
	n, err := rpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rpd *ResetPasswordDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(resetpassword.Table, sqlgraph.NewFieldSpec(resetpassword.FieldID, field.TypeUUID))
	if ps := rpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rpd.mutation.done = true
	return affected, err
}

// ResetPasswordDeleteOne is the builder for deleting a single ResetPassword entity.
type ResetPasswordDeleteOne struct {
	rpd *ResetPasswordDelete
}

// Where appends a list predicates to the ResetPasswordDelete builder.
func (rpdo *ResetPasswordDeleteOne) Where(ps ...predicate.ResetPassword) *ResetPasswordDeleteOne {
	rpdo.rpd.mutation.Where(ps...)
	return rpdo
}

// Exec executes the deletion query.
func (rpdo *ResetPasswordDeleteOne) Exec(ctx context.Context) error {
	n, err := rpdo.rpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{resetpassword.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rpdo *ResetPasswordDeleteOne) ExecX(ctx context.Context) {
	if err := rpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
