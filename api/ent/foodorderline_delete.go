// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/foodorderline"
	"PopcornMovie/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FoodOrderLineDelete is the builder for deleting a FoodOrderLine entity.
type FoodOrderLineDelete struct {
	config
	hooks    []Hook
	mutation *FoodOrderLineMutation
}

// Where appends a list predicates to the FoodOrderLineDelete builder.
func (fold *FoodOrderLineDelete) Where(ps ...predicate.FoodOrderLine) *FoodOrderLineDelete {
	fold.mutation.Where(ps...)
	return fold
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fold *FoodOrderLineDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fold.sqlExec, fold.mutation, fold.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fold *FoodOrderLineDelete) ExecX(ctx context.Context) int {
	n, err := fold.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fold *FoodOrderLineDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(foodorderline.Table, sqlgraph.NewFieldSpec(foodorderline.FieldID, field.TypeUUID))
	if ps := fold.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fold.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fold.mutation.done = true
	return affected, err
}

// FoodOrderLineDeleteOne is the builder for deleting a single FoodOrderLine entity.
type FoodOrderLineDeleteOne struct {
	fold *FoodOrderLineDelete
}

// Where appends a list predicates to the FoodOrderLineDelete builder.
func (foldo *FoodOrderLineDeleteOne) Where(ps ...predicate.FoodOrderLine) *FoodOrderLineDeleteOne {
	foldo.fold.mutation.Where(ps...)
	return foldo
}

// Exec executes the deletion query.
func (foldo *FoodOrderLineDeleteOne) Exec(ctx context.Context) error {
	n, err := foldo.fold.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{foodorderline.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (foldo *FoodOrderLineDeleteOne) ExecX(ctx context.Context) {
	if err := foldo.Exec(ctx); err != nil {
		panic(err)
	}
}
