// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/foodorderline"
	"PopcornMovie/ent/predicate"
	"PopcornMovie/ent/ticket"
	"PopcornMovie/ent/transaction"
	"PopcornMovie/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionMutation
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tu *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTotal sets the "total" field.
func (tu *TransactionUpdate) SetTotal(f float64) *TransactionUpdate {
	tu.mutation.ResetTotal()
	tu.mutation.SetTotal(f)
	return tu
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTotal(f *float64) *TransactionUpdate {
	if f != nil {
		tu.SetTotal(*f)
	}
	return tu
}

// AddTotal adds f to the "total" field.
func (tu *TransactionUpdate) AddTotal(f float64) *TransactionUpdate {
	tu.mutation.AddTotal(f)
	return tu
}

// SetUserID sets the "user_id" field.
func (tu *TransactionUpdate) SetUserID(u uuid.UUID) *TransactionUpdate {
	tu.mutation.SetUserID(u)
	return tu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableUserID(u *uuid.UUID) *TransactionUpdate {
	if u != nil {
		tu.SetUserID(*u)
	}
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TransactionUpdate) SetUpdatedAt(t time.Time) *TransactionUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetUser sets the "user" edge to the User entity.
func (tu *TransactionUpdate) SetUser(u *User) *TransactionUpdate {
	return tu.SetUserID(u.ID)
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (tu *TransactionUpdate) AddTicketIDs(ids ...uuid.UUID) *TransactionUpdate {
	tu.mutation.AddTicketIDs(ids...)
	return tu
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (tu *TransactionUpdate) AddTickets(t ...*Ticket) *TransactionUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTicketIDs(ids...)
}

// AddFoodOrderLineIDs adds the "food_order_lines" edge to the FoodOrderLine entity by IDs.
func (tu *TransactionUpdate) AddFoodOrderLineIDs(ids ...uuid.UUID) *TransactionUpdate {
	tu.mutation.AddFoodOrderLineIDs(ids...)
	return tu
}

// AddFoodOrderLines adds the "food_order_lines" edges to the FoodOrderLine entity.
func (tu *TransactionUpdate) AddFoodOrderLines(f ...*FoodOrderLine) *TransactionUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tu.AddFoodOrderLineIDs(ids...)
}

// Mutation returns the TransactionMutation object of the builder.
func (tu *TransactionUpdate) Mutation() *TransactionMutation {
	return tu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tu *TransactionUpdate) ClearUser() *TransactionUpdate {
	tu.mutation.ClearUser()
	return tu
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (tu *TransactionUpdate) ClearTickets() *TransactionUpdate {
	tu.mutation.ClearTickets()
	return tu
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (tu *TransactionUpdate) RemoveTicketIDs(ids ...uuid.UUID) *TransactionUpdate {
	tu.mutation.RemoveTicketIDs(ids...)
	return tu
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (tu *TransactionUpdate) RemoveTickets(t ...*Ticket) *TransactionUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTicketIDs(ids...)
}

// ClearFoodOrderLines clears all "food_order_lines" edges to the FoodOrderLine entity.
func (tu *TransactionUpdate) ClearFoodOrderLines() *TransactionUpdate {
	tu.mutation.ClearFoodOrderLines()
	return tu
}

// RemoveFoodOrderLineIDs removes the "food_order_lines" edge to FoodOrderLine entities by IDs.
func (tu *TransactionUpdate) RemoveFoodOrderLineIDs(ids ...uuid.UUID) *TransactionUpdate {
	tu.mutation.RemoveFoodOrderLineIDs(ids...)
	return tu
}

// RemoveFoodOrderLines removes "food_order_lines" edges to FoodOrderLine entities.
func (tu *TransactionUpdate) RemoveFoodOrderLines(f ...*FoodOrderLine) *TransactionUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tu.RemoveFoodOrderLineIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TransactionUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := transaction.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TransactionUpdate) check() error {
	if _, ok := tu.mutation.UserID(); tu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Transaction.user"`)
	}
	return nil
}

func (tu *TransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Total(); ok {
		_spec.SetField(transaction.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedTotal(); ok {
		_spec.AddField(transaction.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.UserTable,
			Columns: []string{transaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.UserTable,
			Columns: []string{transaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TicketsTable,
			Columns: []string{transaction.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !tu.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TicketsTable,
			Columns: []string{transaction.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TicketsTable,
			Columns: []string{transaction.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.FoodOrderLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.FoodOrderLinesTable,
			Columns: []string{transaction.FoodOrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodorderline.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedFoodOrderLinesIDs(); len(nodes) > 0 && !tu.mutation.FoodOrderLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.FoodOrderLinesTable,
			Columns: []string{transaction.FoodOrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodorderline.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.FoodOrderLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.FoodOrderLinesTable,
			Columns: []string{transaction.FoodOrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodorderline.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionMutation
}

// SetTotal sets the "total" field.
func (tuo *TransactionUpdateOne) SetTotal(f float64) *TransactionUpdateOne {
	tuo.mutation.ResetTotal()
	tuo.mutation.SetTotal(f)
	return tuo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTotal(f *float64) *TransactionUpdateOne {
	if f != nil {
		tuo.SetTotal(*f)
	}
	return tuo
}

// AddTotal adds f to the "total" field.
func (tuo *TransactionUpdateOne) AddTotal(f float64) *TransactionUpdateOne {
	tuo.mutation.AddTotal(f)
	return tuo
}

// SetUserID sets the "user_id" field.
func (tuo *TransactionUpdateOne) SetUserID(u uuid.UUID) *TransactionUpdateOne {
	tuo.mutation.SetUserID(u)
	return tuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableUserID(u *uuid.UUID) *TransactionUpdateOne {
	if u != nil {
		tuo.SetUserID(*u)
	}
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TransactionUpdateOne) SetUpdatedAt(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetUser sets the "user" edge to the User entity.
func (tuo *TransactionUpdateOne) SetUser(u *User) *TransactionUpdateOne {
	return tuo.SetUserID(u.ID)
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (tuo *TransactionUpdateOne) AddTicketIDs(ids ...uuid.UUID) *TransactionUpdateOne {
	tuo.mutation.AddTicketIDs(ids...)
	return tuo
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (tuo *TransactionUpdateOne) AddTickets(t ...*Ticket) *TransactionUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTicketIDs(ids...)
}

// AddFoodOrderLineIDs adds the "food_order_lines" edge to the FoodOrderLine entity by IDs.
func (tuo *TransactionUpdateOne) AddFoodOrderLineIDs(ids ...uuid.UUID) *TransactionUpdateOne {
	tuo.mutation.AddFoodOrderLineIDs(ids...)
	return tuo
}

// AddFoodOrderLines adds the "food_order_lines" edges to the FoodOrderLine entity.
func (tuo *TransactionUpdateOne) AddFoodOrderLines(f ...*FoodOrderLine) *TransactionUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tuo.AddFoodOrderLineIDs(ids...)
}

// Mutation returns the TransactionMutation object of the builder.
func (tuo *TransactionUpdateOne) Mutation() *TransactionMutation {
	return tuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tuo *TransactionUpdateOne) ClearUser() *TransactionUpdateOne {
	tuo.mutation.ClearUser()
	return tuo
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (tuo *TransactionUpdateOne) ClearTickets() *TransactionUpdateOne {
	tuo.mutation.ClearTickets()
	return tuo
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (tuo *TransactionUpdateOne) RemoveTicketIDs(ids ...uuid.UUID) *TransactionUpdateOne {
	tuo.mutation.RemoveTicketIDs(ids...)
	return tuo
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (tuo *TransactionUpdateOne) RemoveTickets(t ...*Ticket) *TransactionUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTicketIDs(ids...)
}

// ClearFoodOrderLines clears all "food_order_lines" edges to the FoodOrderLine entity.
func (tuo *TransactionUpdateOne) ClearFoodOrderLines() *TransactionUpdateOne {
	tuo.mutation.ClearFoodOrderLines()
	return tuo
}

// RemoveFoodOrderLineIDs removes the "food_order_lines" edge to FoodOrderLine entities by IDs.
func (tuo *TransactionUpdateOne) RemoveFoodOrderLineIDs(ids ...uuid.UUID) *TransactionUpdateOne {
	tuo.mutation.RemoveFoodOrderLineIDs(ids...)
	return tuo
}

// RemoveFoodOrderLines removes "food_order_lines" edges to FoodOrderLine entities.
func (tuo *TransactionUpdateOne) RemoveFoodOrderLines(f ...*FoodOrderLine) *TransactionUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tuo.RemoveFoodOrderLineIDs(ids...)
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tuo *TransactionUpdateOne) Where(ps ...predicate.Transaction) *TransactionUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transaction entity.
func (tuo *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TransactionUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := transaction.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TransactionUpdateOne) check() error {
	if _, ok := tuo.mutation.UserID(); tuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Transaction.user"`)
	}
	return nil
}

func (tuo *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Total(); ok {
		_spec.SetField(transaction.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedTotal(); ok {
		_spec.AddField(transaction.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.UserTable,
			Columns: []string{transaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.UserTable,
			Columns: []string{transaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TicketsTable,
			Columns: []string{transaction.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !tuo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TicketsTable,
			Columns: []string{transaction.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TicketsTable,
			Columns: []string{transaction.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.FoodOrderLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.FoodOrderLinesTable,
			Columns: []string{transaction.FoodOrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodorderline.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedFoodOrderLinesIDs(); len(nodes) > 0 && !tuo.mutation.FoodOrderLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.FoodOrderLinesTable,
			Columns: []string{transaction.FoodOrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodorderline.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.FoodOrderLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.FoodOrderLinesTable,
			Columns: []string{transaction.FoodOrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(foodorderline.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transaction{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
