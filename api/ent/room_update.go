// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/predicate"
	"PopcornMovie/ent/room"
	"PopcornMovie/ent/seat"
	"PopcornMovie/ent/showtime"
	"PopcornMovie/ent/theater"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RoomUpdate is the builder for updating Room entities.
type RoomUpdate struct {
	config
	hooks    []Hook
	mutation *RoomMutation
}

// Where appends a list predicates to the RoomUpdate builder.
func (ru *RoomUpdate) Where(ps ...predicate.Room) *RoomUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetRoomNumber sets the "room_number" field.
func (ru *RoomUpdate) SetRoomNumber(i int) *RoomUpdate {
	ru.mutation.ResetRoomNumber()
	ru.mutation.SetRoomNumber(i)
	return ru
}

// SetNillableRoomNumber sets the "room_number" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableRoomNumber(i *int) *RoomUpdate {
	if i != nil {
		ru.SetRoomNumber(*i)
	}
	return ru
}

// AddRoomNumber adds i to the "room_number" field.
func (ru *RoomUpdate) AddRoomNumber(i int) *RoomUpdate {
	ru.mutation.AddRoomNumber(i)
	return ru
}

// SetTheaterID sets the "theater_id" field.
func (ru *RoomUpdate) SetTheaterID(u uuid.UUID) *RoomUpdate {
	ru.mutation.SetTheaterID(u)
	return ru
}

// SetNillableTheaterID sets the "theater_id" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableTheaterID(u *uuid.UUID) *RoomUpdate {
	if u != nil {
		ru.SetTheaterID(*u)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RoomUpdate) SetUpdatedAt(t time.Time) *RoomUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetTheater sets the "theater" edge to the Theater entity.
func (ru *RoomUpdate) SetTheater(t *Theater) *RoomUpdate {
	return ru.SetTheaterID(t.ID)
}

// AddSeatIDs adds the "seats" edge to the Seat entity by IDs.
func (ru *RoomUpdate) AddSeatIDs(ids ...uuid.UUID) *RoomUpdate {
	ru.mutation.AddSeatIDs(ids...)
	return ru
}

// AddSeats adds the "seats" edges to the Seat entity.
func (ru *RoomUpdate) AddSeats(s ...*Seat) *RoomUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.AddSeatIDs(ids...)
}

// AddShowTimeIDs adds the "showTimes" edge to the ShowTime entity by IDs.
func (ru *RoomUpdate) AddShowTimeIDs(ids ...uuid.UUID) *RoomUpdate {
	ru.mutation.AddShowTimeIDs(ids...)
	return ru
}

// AddShowTimes adds the "showTimes" edges to the ShowTime entity.
func (ru *RoomUpdate) AddShowTimes(s ...*ShowTime) *RoomUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.AddShowTimeIDs(ids...)
}

// Mutation returns the RoomMutation object of the builder.
func (ru *RoomUpdate) Mutation() *RoomMutation {
	return ru.mutation
}

// ClearTheater clears the "theater" edge to the Theater entity.
func (ru *RoomUpdate) ClearTheater() *RoomUpdate {
	ru.mutation.ClearTheater()
	return ru
}

// ClearSeats clears all "seats" edges to the Seat entity.
func (ru *RoomUpdate) ClearSeats() *RoomUpdate {
	ru.mutation.ClearSeats()
	return ru
}

// RemoveSeatIDs removes the "seats" edge to Seat entities by IDs.
func (ru *RoomUpdate) RemoveSeatIDs(ids ...uuid.UUID) *RoomUpdate {
	ru.mutation.RemoveSeatIDs(ids...)
	return ru
}

// RemoveSeats removes "seats" edges to Seat entities.
func (ru *RoomUpdate) RemoveSeats(s ...*Seat) *RoomUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.RemoveSeatIDs(ids...)
}

// ClearShowTimes clears all "showTimes" edges to the ShowTime entity.
func (ru *RoomUpdate) ClearShowTimes() *RoomUpdate {
	ru.mutation.ClearShowTimes()
	return ru
}

// RemoveShowTimeIDs removes the "showTimes" edge to ShowTime entities by IDs.
func (ru *RoomUpdate) RemoveShowTimeIDs(ids ...uuid.UUID) *RoomUpdate {
	ru.mutation.RemoveShowTimeIDs(ids...)
	return ru
}

// RemoveShowTimes removes "showTimes" edges to ShowTime entities.
func (ru *RoomUpdate) RemoveShowTimes(s ...*ShowTime) *RoomUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.RemoveShowTimeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoomUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoomUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoomUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoomUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RoomUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := room.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RoomUpdate) check() error {
	if v, ok := ru.mutation.RoomNumber(); ok {
		if err := room.RoomNumberValidator(v); err != nil {
			return &ValidationError{Name: "room_number", err: fmt.Errorf(`ent: validator failed for field "Room.room_number": %w`, err)}
		}
	}
	if _, ok := ru.mutation.TheaterID(); ru.mutation.TheaterCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Room.theater"`)
	}
	return nil
}

func (ru *RoomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(room.Table, room.Columns, sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.RoomNumber(); ok {
		_spec.SetField(room.FieldRoomNumber, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedRoomNumber(); ok {
		_spec.AddField(room.FieldRoomNumber, field.TypeInt, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(room.FieldUpdatedAt, field.TypeTime, value)
	}
	if ru.mutation.TheaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.TheaterTable,
			Columns: []string{room.TheaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(theater.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TheaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.TheaterTable,
			Columns: []string{room.TheaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(theater.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.SeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.SeatsTable,
			Columns: []string{room.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedSeatsIDs(); len(nodes) > 0 && !ru.mutation.SeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.SeatsTable,
			Columns: []string{room.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.SeatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.SeatsTable,
			Columns: []string{room.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ShowTimesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ShowTimesTable,
			Columns: []string{room.ShowTimesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(showtime.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedShowTimesIDs(); len(nodes) > 0 && !ru.mutation.ShowTimesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ShowTimesTable,
			Columns: []string{room.ShowTimesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(showtime.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ShowTimesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ShowTimesTable,
			Columns: []string{room.ShowTimesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(showtime.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{room.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoomUpdateOne is the builder for updating a single Room entity.
type RoomUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoomMutation
}

// SetRoomNumber sets the "room_number" field.
func (ruo *RoomUpdateOne) SetRoomNumber(i int) *RoomUpdateOne {
	ruo.mutation.ResetRoomNumber()
	ruo.mutation.SetRoomNumber(i)
	return ruo
}

// SetNillableRoomNumber sets the "room_number" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableRoomNumber(i *int) *RoomUpdateOne {
	if i != nil {
		ruo.SetRoomNumber(*i)
	}
	return ruo
}

// AddRoomNumber adds i to the "room_number" field.
func (ruo *RoomUpdateOne) AddRoomNumber(i int) *RoomUpdateOne {
	ruo.mutation.AddRoomNumber(i)
	return ruo
}

// SetTheaterID sets the "theater_id" field.
func (ruo *RoomUpdateOne) SetTheaterID(u uuid.UUID) *RoomUpdateOne {
	ruo.mutation.SetTheaterID(u)
	return ruo
}

// SetNillableTheaterID sets the "theater_id" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableTheaterID(u *uuid.UUID) *RoomUpdateOne {
	if u != nil {
		ruo.SetTheaterID(*u)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RoomUpdateOne) SetUpdatedAt(t time.Time) *RoomUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetTheater sets the "theater" edge to the Theater entity.
func (ruo *RoomUpdateOne) SetTheater(t *Theater) *RoomUpdateOne {
	return ruo.SetTheaterID(t.ID)
}

// AddSeatIDs adds the "seats" edge to the Seat entity by IDs.
func (ruo *RoomUpdateOne) AddSeatIDs(ids ...uuid.UUID) *RoomUpdateOne {
	ruo.mutation.AddSeatIDs(ids...)
	return ruo
}

// AddSeats adds the "seats" edges to the Seat entity.
func (ruo *RoomUpdateOne) AddSeats(s ...*Seat) *RoomUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.AddSeatIDs(ids...)
}

// AddShowTimeIDs adds the "showTimes" edge to the ShowTime entity by IDs.
func (ruo *RoomUpdateOne) AddShowTimeIDs(ids ...uuid.UUID) *RoomUpdateOne {
	ruo.mutation.AddShowTimeIDs(ids...)
	return ruo
}

// AddShowTimes adds the "showTimes" edges to the ShowTime entity.
func (ruo *RoomUpdateOne) AddShowTimes(s ...*ShowTime) *RoomUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.AddShowTimeIDs(ids...)
}

// Mutation returns the RoomMutation object of the builder.
func (ruo *RoomUpdateOne) Mutation() *RoomMutation {
	return ruo.mutation
}

// ClearTheater clears the "theater" edge to the Theater entity.
func (ruo *RoomUpdateOne) ClearTheater() *RoomUpdateOne {
	ruo.mutation.ClearTheater()
	return ruo
}

// ClearSeats clears all "seats" edges to the Seat entity.
func (ruo *RoomUpdateOne) ClearSeats() *RoomUpdateOne {
	ruo.mutation.ClearSeats()
	return ruo
}

// RemoveSeatIDs removes the "seats" edge to Seat entities by IDs.
func (ruo *RoomUpdateOne) RemoveSeatIDs(ids ...uuid.UUID) *RoomUpdateOne {
	ruo.mutation.RemoveSeatIDs(ids...)
	return ruo
}

// RemoveSeats removes "seats" edges to Seat entities.
func (ruo *RoomUpdateOne) RemoveSeats(s ...*Seat) *RoomUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.RemoveSeatIDs(ids...)
}

// ClearShowTimes clears all "showTimes" edges to the ShowTime entity.
func (ruo *RoomUpdateOne) ClearShowTimes() *RoomUpdateOne {
	ruo.mutation.ClearShowTimes()
	return ruo
}

// RemoveShowTimeIDs removes the "showTimes" edge to ShowTime entities by IDs.
func (ruo *RoomUpdateOne) RemoveShowTimeIDs(ids ...uuid.UUID) *RoomUpdateOne {
	ruo.mutation.RemoveShowTimeIDs(ids...)
	return ruo
}

// RemoveShowTimes removes "showTimes" edges to ShowTime entities.
func (ruo *RoomUpdateOne) RemoveShowTimes(s ...*ShowTime) *RoomUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.RemoveShowTimeIDs(ids...)
}

// Where appends a list predicates to the RoomUpdate builder.
func (ruo *RoomUpdateOne) Where(ps ...predicate.Room) *RoomUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoomUpdateOne) Select(field string, fields ...string) *RoomUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Room entity.
func (ruo *RoomUpdateOne) Save(ctx context.Context) (*Room, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoomUpdateOne) SaveX(ctx context.Context) *Room {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoomUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoomUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RoomUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := room.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RoomUpdateOne) check() error {
	if v, ok := ruo.mutation.RoomNumber(); ok {
		if err := room.RoomNumberValidator(v); err != nil {
			return &ValidationError{Name: "room_number", err: fmt.Errorf(`ent: validator failed for field "Room.room_number": %w`, err)}
		}
	}
	if _, ok := ruo.mutation.TheaterID(); ruo.mutation.TheaterCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Room.theater"`)
	}
	return nil
}

func (ruo *RoomUpdateOne) sqlSave(ctx context.Context) (_node *Room, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(room.Table, room.Columns, sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Room.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, room.FieldID)
		for _, f := range fields {
			if !room.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != room.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.RoomNumber(); ok {
		_spec.SetField(room.FieldRoomNumber, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedRoomNumber(); ok {
		_spec.AddField(room.FieldRoomNumber, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(room.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruo.mutation.TheaterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.TheaterTable,
			Columns: []string{room.TheaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(theater.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TheaterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.TheaterTable,
			Columns: []string{room.TheaterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(theater.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.SeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.SeatsTable,
			Columns: []string{room.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedSeatsIDs(); len(nodes) > 0 && !ruo.mutation.SeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.SeatsTable,
			Columns: []string{room.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.SeatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.SeatsTable,
			Columns: []string{room.SeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ShowTimesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ShowTimesTable,
			Columns: []string{room.ShowTimesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(showtime.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedShowTimesIDs(); len(nodes) > 0 && !ruo.mutation.ShowTimesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ShowTimesTable,
			Columns: []string{room.ShowTimesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(showtime.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ShowTimesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ShowTimesTable,
			Columns: []string{room.ShowTimesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(showtime.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Room{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{room.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
