// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/food"
	"PopcornMovie/ent/foodorderline"
	"PopcornMovie/ent/transaction"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FoodOrderLineCreate is the builder for creating a FoodOrderLine entity.
type FoodOrderLineCreate struct {
	config
	mutation *FoodOrderLineMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetQuantity sets the "quantity" field.
func (folc *FoodOrderLineCreate) SetQuantity(i int) *FoodOrderLineCreate {
	folc.mutation.SetQuantity(i)
	return folc
}

// SetFoodID sets the "food_id" field.
func (folc *FoodOrderLineCreate) SetFoodID(u uuid.UUID) *FoodOrderLineCreate {
	folc.mutation.SetFoodID(u)
	return folc
}

// SetTransactionID sets the "transaction_id" field.
func (folc *FoodOrderLineCreate) SetTransactionID(u uuid.UUID) *FoodOrderLineCreate {
	folc.mutation.SetTransactionID(u)
	return folc
}

// SetCreatedAt sets the "created_at" field.
func (folc *FoodOrderLineCreate) SetCreatedAt(t time.Time) *FoodOrderLineCreate {
	folc.mutation.SetCreatedAt(t)
	return folc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (folc *FoodOrderLineCreate) SetNillableCreatedAt(t *time.Time) *FoodOrderLineCreate {
	if t != nil {
		folc.SetCreatedAt(*t)
	}
	return folc
}

// SetUpdatedAt sets the "updated_at" field.
func (folc *FoodOrderLineCreate) SetUpdatedAt(t time.Time) *FoodOrderLineCreate {
	folc.mutation.SetUpdatedAt(t)
	return folc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (folc *FoodOrderLineCreate) SetNillableUpdatedAt(t *time.Time) *FoodOrderLineCreate {
	if t != nil {
		folc.SetUpdatedAt(*t)
	}
	return folc
}

// SetID sets the "id" field.
func (folc *FoodOrderLineCreate) SetID(u uuid.UUID) *FoodOrderLineCreate {
	folc.mutation.SetID(u)
	return folc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (folc *FoodOrderLineCreate) SetNillableID(u *uuid.UUID) *FoodOrderLineCreate {
	if u != nil {
		folc.SetID(*u)
	}
	return folc
}

// SetFood sets the "food" edge to the Food entity.
func (folc *FoodOrderLineCreate) SetFood(f *Food) *FoodOrderLineCreate {
	return folc.SetFoodID(f.ID)
}

// SetTransaction sets the "transaction" edge to the Transaction entity.
func (folc *FoodOrderLineCreate) SetTransaction(t *Transaction) *FoodOrderLineCreate {
	return folc.SetTransactionID(t.ID)
}

// Mutation returns the FoodOrderLineMutation object of the builder.
func (folc *FoodOrderLineCreate) Mutation() *FoodOrderLineMutation {
	return folc.mutation
}

// Save creates the FoodOrderLine in the database.
func (folc *FoodOrderLineCreate) Save(ctx context.Context) (*FoodOrderLine, error) {
	folc.defaults()
	return withHooks(ctx, folc.sqlSave, folc.mutation, folc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (folc *FoodOrderLineCreate) SaveX(ctx context.Context) *FoodOrderLine {
	v, err := folc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (folc *FoodOrderLineCreate) Exec(ctx context.Context) error {
	_, err := folc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (folc *FoodOrderLineCreate) ExecX(ctx context.Context) {
	if err := folc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (folc *FoodOrderLineCreate) defaults() {
	if _, ok := folc.mutation.CreatedAt(); !ok {
		v := foodorderline.DefaultCreatedAt()
		folc.mutation.SetCreatedAt(v)
	}
	if _, ok := folc.mutation.UpdatedAt(); !ok {
		v := foodorderline.DefaultUpdatedAt()
		folc.mutation.SetUpdatedAt(v)
	}
	if _, ok := folc.mutation.ID(); !ok {
		v := foodorderline.DefaultID()
		folc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (folc *FoodOrderLineCreate) check() error {
	if _, ok := folc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "FoodOrderLine.quantity"`)}
	}
	if _, ok := folc.mutation.FoodID(); !ok {
		return &ValidationError{Name: "food_id", err: errors.New(`ent: missing required field "FoodOrderLine.food_id"`)}
	}
	if _, ok := folc.mutation.TransactionID(); !ok {
		return &ValidationError{Name: "transaction_id", err: errors.New(`ent: missing required field "FoodOrderLine.transaction_id"`)}
	}
	if _, ok := folc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FoodOrderLine.created_at"`)}
	}
	if _, ok := folc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FoodOrderLine.updated_at"`)}
	}
	if _, ok := folc.mutation.FoodID(); !ok {
		return &ValidationError{Name: "food", err: errors.New(`ent: missing required edge "FoodOrderLine.food"`)}
	}
	if _, ok := folc.mutation.TransactionID(); !ok {
		return &ValidationError{Name: "transaction", err: errors.New(`ent: missing required edge "FoodOrderLine.transaction"`)}
	}
	return nil
}

func (folc *FoodOrderLineCreate) sqlSave(ctx context.Context) (*FoodOrderLine, error) {
	if err := folc.check(); err != nil {
		return nil, err
	}
	_node, _spec := folc.createSpec()
	if err := sqlgraph.CreateNode(ctx, folc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	folc.mutation.id = &_node.ID
	folc.mutation.done = true
	return _node, nil
}

func (folc *FoodOrderLineCreate) createSpec() (*FoodOrderLine, *sqlgraph.CreateSpec) {
	var (
		_node = &FoodOrderLine{config: folc.config}
		_spec = sqlgraph.NewCreateSpec(foodorderline.Table, sqlgraph.NewFieldSpec(foodorderline.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = folc.conflict
	if id, ok := folc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := folc.mutation.Quantity(); ok {
		_spec.SetField(foodorderline.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if value, ok := folc.mutation.CreatedAt(); ok {
		_spec.SetField(foodorderline.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := folc.mutation.UpdatedAt(); ok {
		_spec.SetField(foodorderline.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := folc.mutation.FoodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foodorderline.FoodTable,
			Columns: []string{foodorderline.FoodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(food.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FoodID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := folc.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   foodorderline.TransactionTable,
			Columns: []string{foodorderline.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TransactionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FoodOrderLine.Create().
//		SetQuantity(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FoodOrderLineUpsert) {
//			SetQuantity(v+v).
//		}).
//		Exec(ctx)
func (folc *FoodOrderLineCreate) OnConflict(opts ...sql.ConflictOption) *FoodOrderLineUpsertOne {
	folc.conflict = opts
	return &FoodOrderLineUpsertOne{
		create: folc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FoodOrderLine.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (folc *FoodOrderLineCreate) OnConflictColumns(columns ...string) *FoodOrderLineUpsertOne {
	folc.conflict = append(folc.conflict, sql.ConflictColumns(columns...))
	return &FoodOrderLineUpsertOne{
		create: folc,
	}
}

type (
	// FoodOrderLineUpsertOne is the builder for "upsert"-ing
	//  one FoodOrderLine node.
	FoodOrderLineUpsertOne struct {
		create *FoodOrderLineCreate
	}

	// FoodOrderLineUpsert is the "OnConflict" setter.
	FoodOrderLineUpsert struct {
		*sql.UpdateSet
	}
)

// SetQuantity sets the "quantity" field.
func (u *FoodOrderLineUpsert) SetQuantity(v int) *FoodOrderLineUpsert {
	u.Set(foodorderline.FieldQuantity, v)
	return u
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *FoodOrderLineUpsert) UpdateQuantity() *FoodOrderLineUpsert {
	u.SetExcluded(foodorderline.FieldQuantity)
	return u
}

// AddQuantity adds v to the "quantity" field.
func (u *FoodOrderLineUpsert) AddQuantity(v int) *FoodOrderLineUpsert {
	u.Add(foodorderline.FieldQuantity, v)
	return u
}

// SetFoodID sets the "food_id" field.
func (u *FoodOrderLineUpsert) SetFoodID(v uuid.UUID) *FoodOrderLineUpsert {
	u.Set(foodorderline.FieldFoodID, v)
	return u
}

// UpdateFoodID sets the "food_id" field to the value that was provided on create.
func (u *FoodOrderLineUpsert) UpdateFoodID() *FoodOrderLineUpsert {
	u.SetExcluded(foodorderline.FieldFoodID)
	return u
}

// SetTransactionID sets the "transaction_id" field.
func (u *FoodOrderLineUpsert) SetTransactionID(v uuid.UUID) *FoodOrderLineUpsert {
	u.Set(foodorderline.FieldTransactionID, v)
	return u
}

// UpdateTransactionID sets the "transaction_id" field to the value that was provided on create.
func (u *FoodOrderLineUpsert) UpdateTransactionID() *FoodOrderLineUpsert {
	u.SetExcluded(foodorderline.FieldTransactionID)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FoodOrderLineUpsert) SetUpdatedAt(v time.Time) *FoodOrderLineUpsert {
	u.Set(foodorderline.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FoodOrderLineUpsert) UpdateUpdatedAt() *FoodOrderLineUpsert {
	u.SetExcluded(foodorderline.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FoodOrderLine.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(foodorderline.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FoodOrderLineUpsertOne) UpdateNewValues() *FoodOrderLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(foodorderline.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(foodorderline.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FoodOrderLine.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FoodOrderLineUpsertOne) Ignore() *FoodOrderLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FoodOrderLineUpsertOne) DoNothing() *FoodOrderLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FoodOrderLineCreate.OnConflict
// documentation for more info.
func (u *FoodOrderLineUpsertOne) Update(set func(*FoodOrderLineUpsert)) *FoodOrderLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FoodOrderLineUpsert{UpdateSet: update})
	}))
	return u
}

// SetQuantity sets the "quantity" field.
func (u *FoodOrderLineUpsertOne) SetQuantity(v int) *FoodOrderLineUpsertOne {
	return u.Update(func(s *FoodOrderLineUpsert) {
		s.SetQuantity(v)
	})
}

// AddQuantity adds v to the "quantity" field.
func (u *FoodOrderLineUpsertOne) AddQuantity(v int) *FoodOrderLineUpsertOne {
	return u.Update(func(s *FoodOrderLineUpsert) {
		s.AddQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *FoodOrderLineUpsertOne) UpdateQuantity() *FoodOrderLineUpsertOne {
	return u.Update(func(s *FoodOrderLineUpsert) {
		s.UpdateQuantity()
	})
}

// SetFoodID sets the "food_id" field.
func (u *FoodOrderLineUpsertOne) SetFoodID(v uuid.UUID) *FoodOrderLineUpsertOne {
	return u.Update(func(s *FoodOrderLineUpsert) {
		s.SetFoodID(v)
	})
}

// UpdateFoodID sets the "food_id" field to the value that was provided on create.
func (u *FoodOrderLineUpsertOne) UpdateFoodID() *FoodOrderLineUpsertOne {
	return u.Update(func(s *FoodOrderLineUpsert) {
		s.UpdateFoodID()
	})
}

// SetTransactionID sets the "transaction_id" field.
func (u *FoodOrderLineUpsertOne) SetTransactionID(v uuid.UUID) *FoodOrderLineUpsertOne {
	return u.Update(func(s *FoodOrderLineUpsert) {
		s.SetTransactionID(v)
	})
}

// UpdateTransactionID sets the "transaction_id" field to the value that was provided on create.
func (u *FoodOrderLineUpsertOne) UpdateTransactionID() *FoodOrderLineUpsertOne {
	return u.Update(func(s *FoodOrderLineUpsert) {
		s.UpdateTransactionID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FoodOrderLineUpsertOne) SetUpdatedAt(v time.Time) *FoodOrderLineUpsertOne {
	return u.Update(func(s *FoodOrderLineUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FoodOrderLineUpsertOne) UpdateUpdatedAt() *FoodOrderLineUpsertOne {
	return u.Update(func(s *FoodOrderLineUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *FoodOrderLineUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FoodOrderLineCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FoodOrderLineUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FoodOrderLineUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: FoodOrderLineUpsertOne.ID is not supported by MySQL driver. Use FoodOrderLineUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FoodOrderLineUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FoodOrderLineCreateBulk is the builder for creating many FoodOrderLine entities in bulk.
type FoodOrderLineCreateBulk struct {
	config
	err      error
	builders []*FoodOrderLineCreate
	conflict []sql.ConflictOption
}

// Save creates the FoodOrderLine entities in the database.
func (folcb *FoodOrderLineCreateBulk) Save(ctx context.Context) ([]*FoodOrderLine, error) {
	if folcb.err != nil {
		return nil, folcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(folcb.builders))
	nodes := make([]*FoodOrderLine, len(folcb.builders))
	mutators := make([]Mutator, len(folcb.builders))
	for i := range folcb.builders {
		func(i int, root context.Context) {
			builder := folcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FoodOrderLineMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, folcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = folcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, folcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, folcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (folcb *FoodOrderLineCreateBulk) SaveX(ctx context.Context) []*FoodOrderLine {
	v, err := folcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (folcb *FoodOrderLineCreateBulk) Exec(ctx context.Context) error {
	_, err := folcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (folcb *FoodOrderLineCreateBulk) ExecX(ctx context.Context) {
	if err := folcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FoodOrderLine.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FoodOrderLineUpsert) {
//			SetQuantity(v+v).
//		}).
//		Exec(ctx)
func (folcb *FoodOrderLineCreateBulk) OnConflict(opts ...sql.ConflictOption) *FoodOrderLineUpsertBulk {
	folcb.conflict = opts
	return &FoodOrderLineUpsertBulk{
		create: folcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FoodOrderLine.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (folcb *FoodOrderLineCreateBulk) OnConflictColumns(columns ...string) *FoodOrderLineUpsertBulk {
	folcb.conflict = append(folcb.conflict, sql.ConflictColumns(columns...))
	return &FoodOrderLineUpsertBulk{
		create: folcb,
	}
}

// FoodOrderLineUpsertBulk is the builder for "upsert"-ing
// a bulk of FoodOrderLine nodes.
type FoodOrderLineUpsertBulk struct {
	create *FoodOrderLineCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FoodOrderLine.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(foodorderline.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FoodOrderLineUpsertBulk) UpdateNewValues() *FoodOrderLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(foodorderline.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(foodorderline.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FoodOrderLine.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FoodOrderLineUpsertBulk) Ignore() *FoodOrderLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FoodOrderLineUpsertBulk) DoNothing() *FoodOrderLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FoodOrderLineCreateBulk.OnConflict
// documentation for more info.
func (u *FoodOrderLineUpsertBulk) Update(set func(*FoodOrderLineUpsert)) *FoodOrderLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FoodOrderLineUpsert{UpdateSet: update})
	}))
	return u
}

// SetQuantity sets the "quantity" field.
func (u *FoodOrderLineUpsertBulk) SetQuantity(v int) *FoodOrderLineUpsertBulk {
	return u.Update(func(s *FoodOrderLineUpsert) {
		s.SetQuantity(v)
	})
}

// AddQuantity adds v to the "quantity" field.
func (u *FoodOrderLineUpsertBulk) AddQuantity(v int) *FoodOrderLineUpsertBulk {
	return u.Update(func(s *FoodOrderLineUpsert) {
		s.AddQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *FoodOrderLineUpsertBulk) UpdateQuantity() *FoodOrderLineUpsertBulk {
	return u.Update(func(s *FoodOrderLineUpsert) {
		s.UpdateQuantity()
	})
}

// SetFoodID sets the "food_id" field.
func (u *FoodOrderLineUpsertBulk) SetFoodID(v uuid.UUID) *FoodOrderLineUpsertBulk {
	return u.Update(func(s *FoodOrderLineUpsert) {
		s.SetFoodID(v)
	})
}

// UpdateFoodID sets the "food_id" field to the value that was provided on create.
func (u *FoodOrderLineUpsertBulk) UpdateFoodID() *FoodOrderLineUpsertBulk {
	return u.Update(func(s *FoodOrderLineUpsert) {
		s.UpdateFoodID()
	})
}

// SetTransactionID sets the "transaction_id" field.
func (u *FoodOrderLineUpsertBulk) SetTransactionID(v uuid.UUID) *FoodOrderLineUpsertBulk {
	return u.Update(func(s *FoodOrderLineUpsert) {
		s.SetTransactionID(v)
	})
}

// UpdateTransactionID sets the "transaction_id" field to the value that was provided on create.
func (u *FoodOrderLineUpsertBulk) UpdateTransactionID() *FoodOrderLineUpsertBulk {
	return u.Update(func(s *FoodOrderLineUpsert) {
		s.UpdateTransactionID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FoodOrderLineUpsertBulk) SetUpdatedAt(v time.Time) *FoodOrderLineUpsertBulk {
	return u.Update(func(s *FoodOrderLineUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FoodOrderLineUpsertBulk) UpdateUpdatedAt() *FoodOrderLineUpsertBulk {
	return u.Update(func(s *FoodOrderLineUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *FoodOrderLineUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FoodOrderLineCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FoodOrderLineCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FoodOrderLineUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
