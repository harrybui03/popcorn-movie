// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/food"
	"PopcornMovie/ent/foodorderline"
	"PopcornMovie/ent/transaction"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// FoodOrderLine is the model entity for the FoodOrderLine schema.
type FoodOrderLine struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// FoodID holds the value of the "food_id" field.
	FoodID uuid.UUID `json:"food_id,omitempty"`
	// TransactionID holds the value of the "transaction_id" field.
	TransactionID uuid.UUID `json:"transaction_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FoodOrderLineQuery when eager-loading is set.
	Edges        FoodOrderLineEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FoodOrderLineEdges holds the relations/edges for other nodes in the graph.
type FoodOrderLineEdges struct {
	// Food holds the value of the food edge.
	Food *Food `json:"food,omitempty"`
	// Transaction holds the value of the transaction edge.
	Transaction *Transaction `json:"transaction,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FoodOrErr returns the Food value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FoodOrderLineEdges) FoodOrErr() (*Food, error) {
	if e.Food != nil {
		return e.Food, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: food.Label}
	}
	return nil, &NotLoadedError{edge: "food"}
}

// TransactionOrErr returns the Transaction value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FoodOrderLineEdges) TransactionOrErr() (*Transaction, error) {
	if e.Transaction != nil {
		return e.Transaction, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: transaction.Label}
	}
	return nil, &NotLoadedError{edge: "transaction"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FoodOrderLine) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case foodorderline.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case foodorderline.FieldCreatedAt, foodorderline.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case foodorderline.FieldID, foodorderline.FieldFoodID, foodorderline.FieldTransactionID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FoodOrderLine fields.
func (fol *FoodOrderLine) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case foodorderline.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				fol.ID = *value
			}
		case foodorderline.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				fol.Quantity = int(value.Int64)
			}
		case foodorderline.FieldFoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field food_id", values[i])
			} else if value != nil {
				fol.FoodID = *value
			}
		case foodorderline.FieldTransactionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_id", values[i])
			} else if value != nil {
				fol.TransactionID = *value
			}
		case foodorderline.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fol.CreatedAt = value.Time
			}
		case foodorderline.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fol.UpdatedAt = value.Time
			}
		default:
			fol.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FoodOrderLine.
// This includes values selected through modifiers, order, etc.
func (fol *FoodOrderLine) Value(name string) (ent.Value, error) {
	return fol.selectValues.Get(name)
}

// QueryFood queries the "food" edge of the FoodOrderLine entity.
func (fol *FoodOrderLine) QueryFood() *FoodQuery {
	return NewFoodOrderLineClient(fol.config).QueryFood(fol)
}

// QueryTransaction queries the "transaction" edge of the FoodOrderLine entity.
func (fol *FoodOrderLine) QueryTransaction() *TransactionQuery {
	return NewFoodOrderLineClient(fol.config).QueryTransaction(fol)
}

// Update returns a builder for updating this FoodOrderLine.
// Note that you need to call FoodOrderLine.Unwrap() before calling this method if this FoodOrderLine
// was returned from a transaction, and the transaction was committed or rolled back.
func (fol *FoodOrderLine) Update() *FoodOrderLineUpdateOne {
	return NewFoodOrderLineClient(fol.config).UpdateOne(fol)
}

// Unwrap unwraps the FoodOrderLine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fol *FoodOrderLine) Unwrap() *FoodOrderLine {
	_tx, ok := fol.config.driver.(*txDriver)
	if !ok {
		panic("ent: FoodOrderLine is not a transactional entity")
	}
	fol.config.driver = _tx.drv
	return fol
}

// String implements the fmt.Stringer.
func (fol *FoodOrderLine) String() string {
	var builder strings.Builder
	builder.WriteString("FoodOrderLine(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fol.ID))
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", fol.Quantity))
	builder.WriteString(", ")
	builder.WriteString("food_id=")
	builder.WriteString(fmt.Sprintf("%v", fol.FoodID))
	builder.WriteString(", ")
	builder.WriteString("transaction_id=")
	builder.WriteString(fmt.Sprintf("%v", fol.TransactionID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fol.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fol.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FoodOrderLines is a parsable slice of FoodOrderLine.
type FoodOrderLines []*FoodOrderLine
