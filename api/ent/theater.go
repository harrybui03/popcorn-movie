// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/theater"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Theater is the model entity for the Theater schema.
type Theater struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phone_number,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TheaterQuery when eager-loading is set.
	Edges        TheaterEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TheaterEdges holds the relations/edges for other nodes in the graph.
type TheaterEdges struct {
	// Rooms holds the value of the rooms edge.
	Rooms []*Room `json:"rooms,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RoomsOrErr returns the Rooms value or an error if the edge
// was not loaded in eager-loading.
func (e TheaterEdges) RoomsOrErr() ([]*Room, error) {
	if e.loadedTypes[0] {
		return e.Rooms, nil
	}
	return nil, &NotLoadedError{edge: "rooms"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Theater) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case theater.FieldAddress, theater.FieldName, theater.FieldPhoneNumber:
			values[i] = new(sql.NullString)
		case theater.FieldCreatedAt, theater.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case theater.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Theater fields.
func (t *Theater) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case theater.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case theater.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				t.Address = value.String
			}
		case theater.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case theater.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				t.PhoneNumber = value.String
			}
		case theater.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case theater.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Theater.
// This includes values selected through modifiers, order, etc.
func (t *Theater) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryRooms queries the "rooms" edge of the Theater entity.
func (t *Theater) QueryRooms() *RoomQuery {
	return NewTheaterClient(t.config).QueryRooms(t)
}

// Update returns a builder for updating this Theater.
// Note that you need to call Theater.Unwrap() before calling this method if this Theater
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Theater) Update() *TheaterUpdateOne {
	return NewTheaterClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Theater entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Theater) Unwrap() *Theater {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Theater is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Theater) String() string {
	var builder strings.Builder
	builder.WriteString("Theater(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("address=")
	builder.WriteString(t.Address)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("phone_number=")
	builder.WriteString(t.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Theaters is a parsable slice of Theater.
type Theaters []*Theater
