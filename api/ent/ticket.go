// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/seat"
	"PopcornMovie/ent/showtime"
	"PopcornMovie/ent/ticket"
	"PopcornMovie/ent/transaction"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Ticket is the model entity for the Ticket schema.
type Ticket struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// IsBooked holds the value of the "is_booked" field.
	IsBooked bool `json:"is_booked,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// TransactionID holds the value of the "transaction_id" field.
	TransactionID uuid.UUID `json:"transaction_id,omitempty"`
	// SeatID holds the value of the "seat_id" field.
	SeatID uuid.UUID `json:"seat_id,omitempty"`
	// ShowTimeID holds the value of the "show_time_id" field.
	ShowTimeID uuid.UUID `json:"show_time_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TicketQuery when eager-loading is set.
	Edges        TicketEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TicketEdges holds the relations/edges for other nodes in the graph.
type TicketEdges struct {
	// Transaction holds the value of the transaction edge.
	Transaction *Transaction `json:"transaction,omitempty"`
	// Seat holds the value of the seat edge.
	Seat *Seat `json:"seat,omitempty"`
	// ShowTime holds the value of the show_time edge.
	ShowTime *ShowTime `json:"show_time,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TransactionOrErr returns the Transaction value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) TransactionOrErr() (*Transaction, error) {
	if e.Transaction != nil {
		return e.Transaction, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: transaction.Label}
	}
	return nil, &NotLoadedError{edge: "transaction"}
}

// SeatOrErr returns the Seat value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) SeatOrErr() (*Seat, error) {
	if e.Seat != nil {
		return e.Seat, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: seat.Label}
	}
	return nil, &NotLoadedError{edge: "seat"}
}

// ShowTimeOrErr returns the ShowTime value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) ShowTimeOrErr() (*ShowTime, error) {
	if e.ShowTime != nil {
		return e.ShowTime, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: showtime.Label}
	}
	return nil, &NotLoadedError{edge: "show_time"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ticket) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ticket.FieldIsBooked:
			values[i] = new(sql.NullBool)
		case ticket.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case ticket.FieldCreatedAt, ticket.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case ticket.FieldID, ticket.FieldTransactionID, ticket.FieldSeatID, ticket.FieldShowTimeID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ticket fields.
func (t *Ticket) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ticket.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case ticket.FieldIsBooked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_booked", values[i])
			} else if value.Valid {
				t.IsBooked = value.Bool
			}
		case ticket.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				t.Price = value.Float64
			}
		case ticket.FieldTransactionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_id", values[i])
			} else if value != nil {
				t.TransactionID = *value
			}
		case ticket.FieldSeatID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field seat_id", values[i])
			} else if value != nil {
				t.SeatID = *value
			}
		case ticket.FieldShowTimeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field show_time_id", values[i])
			} else if value != nil {
				t.ShowTimeID = *value
			}
		case ticket.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case ticket.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ticket.
// This includes values selected through modifiers, order, etc.
func (t *Ticket) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryTransaction queries the "transaction" edge of the Ticket entity.
func (t *Ticket) QueryTransaction() *TransactionQuery {
	return NewTicketClient(t.config).QueryTransaction(t)
}

// QuerySeat queries the "seat" edge of the Ticket entity.
func (t *Ticket) QuerySeat() *SeatQuery {
	return NewTicketClient(t.config).QuerySeat(t)
}

// QueryShowTime queries the "show_time" edge of the Ticket entity.
func (t *Ticket) QueryShowTime() *ShowTimeQuery {
	return NewTicketClient(t.config).QueryShowTime(t)
}

// Update returns a builder for updating this Ticket.
// Note that you need to call Ticket.Unwrap() before calling this method if this Ticket
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Ticket) Update() *TicketUpdateOne {
	return NewTicketClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Ticket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Ticket) Unwrap() *Ticket {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ticket is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Ticket) String() string {
	var builder strings.Builder
	builder.WriteString("Ticket(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("is_booked=")
	builder.WriteString(fmt.Sprintf("%v", t.IsBooked))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", t.Price))
	builder.WriteString(", ")
	builder.WriteString("transaction_id=")
	builder.WriteString(fmt.Sprintf("%v", t.TransactionID))
	builder.WriteString(", ")
	builder.WriteString("seat_id=")
	builder.WriteString(fmt.Sprintf("%v", t.SeatID))
	builder.WriteString(", ")
	builder.WriteString("show_time_id=")
	builder.WriteString(fmt.Sprintf("%v", t.ShowTimeID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tickets is a parsable slice of Ticket.
type Tickets []*Ticket
