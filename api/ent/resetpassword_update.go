// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PopcornMovie/ent/predicate"
	"PopcornMovie/ent/resetpassword"
	"PopcornMovie/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ResetPasswordUpdate is the builder for updating ResetPassword entities.
type ResetPasswordUpdate struct {
	config
	hooks    []Hook
	mutation *ResetPasswordMutation
}

// Where appends a list predicates to the ResetPasswordUpdate builder.
func (rpu *ResetPasswordUpdate) Where(ps ...predicate.ResetPassword) *ResetPasswordUpdate {
	rpu.mutation.Where(ps...)
	return rpu
}

// SetUserID sets the "user_id" field.
func (rpu *ResetPasswordUpdate) SetUserID(u uuid.UUID) *ResetPasswordUpdate {
	rpu.mutation.SetUserID(u)
	return rpu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rpu *ResetPasswordUpdate) SetNillableUserID(u *uuid.UUID) *ResetPasswordUpdate {
	if u != nil {
		rpu.SetUserID(*u)
	}
	return rpu
}

// SetUser sets the "user" edge to the User entity.
func (rpu *ResetPasswordUpdate) SetUser(u *User) *ResetPasswordUpdate {
	return rpu.SetUserID(u.ID)
}

// Mutation returns the ResetPasswordMutation object of the builder.
func (rpu *ResetPasswordUpdate) Mutation() *ResetPasswordMutation {
	return rpu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (rpu *ResetPasswordUpdate) ClearUser() *ResetPasswordUpdate {
	rpu.mutation.ClearUser()
	return rpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpu *ResetPasswordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rpu.sqlSave, rpu.mutation, rpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpu *ResetPasswordUpdate) SaveX(ctx context.Context) int {
	affected, err := rpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpu *ResetPasswordUpdate) Exec(ctx context.Context) error {
	_, err := rpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpu *ResetPasswordUpdate) ExecX(ctx context.Context) {
	if err := rpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpu *ResetPasswordUpdate) check() error {
	if _, ok := rpu.mutation.UserID(); rpu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ResetPassword.user"`)
	}
	return nil
}

func (rpu *ResetPasswordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(resetpassword.Table, resetpassword.Columns, sqlgraph.NewFieldSpec(resetpassword.FieldID, field.TypeUUID))
	if ps := rpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if rpu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resetpassword.UserTable,
			Columns: []string{resetpassword.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resetpassword.UserTable,
			Columns: []string{resetpassword.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resetpassword.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpu.mutation.done = true
	return n, nil
}

// ResetPasswordUpdateOne is the builder for updating a single ResetPassword entity.
type ResetPasswordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResetPasswordMutation
}

// SetUserID sets the "user_id" field.
func (rpuo *ResetPasswordUpdateOne) SetUserID(u uuid.UUID) *ResetPasswordUpdateOne {
	rpuo.mutation.SetUserID(u)
	return rpuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rpuo *ResetPasswordUpdateOne) SetNillableUserID(u *uuid.UUID) *ResetPasswordUpdateOne {
	if u != nil {
		rpuo.SetUserID(*u)
	}
	return rpuo
}

// SetUser sets the "user" edge to the User entity.
func (rpuo *ResetPasswordUpdateOne) SetUser(u *User) *ResetPasswordUpdateOne {
	return rpuo.SetUserID(u.ID)
}

// Mutation returns the ResetPasswordMutation object of the builder.
func (rpuo *ResetPasswordUpdateOne) Mutation() *ResetPasswordMutation {
	return rpuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (rpuo *ResetPasswordUpdateOne) ClearUser() *ResetPasswordUpdateOne {
	rpuo.mutation.ClearUser()
	return rpuo
}

// Where appends a list predicates to the ResetPasswordUpdate builder.
func (rpuo *ResetPasswordUpdateOne) Where(ps ...predicate.ResetPassword) *ResetPasswordUpdateOne {
	rpuo.mutation.Where(ps...)
	return rpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpuo *ResetPasswordUpdateOne) Select(field string, fields ...string) *ResetPasswordUpdateOne {
	rpuo.fields = append([]string{field}, fields...)
	return rpuo
}

// Save executes the query and returns the updated ResetPassword entity.
func (rpuo *ResetPasswordUpdateOne) Save(ctx context.Context) (*ResetPassword, error) {
	return withHooks(ctx, rpuo.sqlSave, rpuo.mutation, rpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpuo *ResetPasswordUpdateOne) SaveX(ctx context.Context) *ResetPassword {
	node, err := rpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpuo *ResetPasswordUpdateOne) Exec(ctx context.Context) error {
	_, err := rpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpuo *ResetPasswordUpdateOne) ExecX(ctx context.Context) {
	if err := rpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpuo *ResetPasswordUpdateOne) check() error {
	if _, ok := rpuo.mutation.UserID(); rpuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ResetPassword.user"`)
	}
	return nil
}

func (rpuo *ResetPasswordUpdateOne) sqlSave(ctx context.Context) (_node *ResetPassword, err error) {
	if err := rpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resetpassword.Table, resetpassword.Columns, sqlgraph.NewFieldSpec(resetpassword.FieldID, field.TypeUUID))
	id, ok := rpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ResetPassword.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resetpassword.FieldID)
		for _, f := range fields {
			if !resetpassword.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != resetpassword.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if rpuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resetpassword.UserTable,
			Columns: []string{resetpassword.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resetpassword.UserTable,
			Columns: []string{resetpassword.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ResetPassword{config: rpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resetpassword.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpuo.mutation.done = true
	return _node, nil
}
