package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"PopcornMovie/ent"
	graphql1 "PopcornMovie/graphql"
	"PopcornMovie/model"
	"context"
)

// Signup is the resolver for the Signup field.
func (r *mutationResolver) Signup(ctx context.Context, input model.RegisterInput) (*ent.User, error) {
	userRecord, err := r.service.Auth().Register(ctx, input)
	if err != nil {
		return nil, err
	}

	return userRecord, nil
}

// Login is the resolver for the Login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.Jwt, error) {
	jwt, err := r.service.Auth().Login(ctx, input)
	if err != nil {
		return nil, err
	}

	return jwt, nil
}

// ForgotPassword is the resolver for the ForgotPassword field.
func (r *mutationResolver) ForgotPassword(ctx context.Context, input string) (*model.MessageCreateOutput, error) {
	message, err := r.service.Auth().ForgotPassword(ctx, input)
	if err != nil {
		return nil, err
	}

	return &model.MessageCreateOutput{
		Output: message,
	}, nil
}

// ResetPassword is the resolver for the ResetPassword field.
func (r *mutationResolver) ResetPassword(ctx context.Context, input model.ResetPasswordInput) (*model.MessageCreateOutput, error) {
	message, err := r.service.Auth().ResetPassword(ctx, input)
	if err != nil {
		return nil, err
	}

	return &model.MessageCreateOutput{
		Output: message,
	}, nil
}

// RenewAccessToken is the resolver for the RenewAccessToken field.
func (r *mutationResolver) RenewAccessToken(ctx context.Context, input model.RenewAccessTokenInput) (*model.Jwt, error) {
	assessToken, err := r.service.Auth().RenewAccessToken(ctx, input)
	if err != nil {
		return nil, err
	}

	return assessToken, err
}

// ChangePassword is the resolver for the ChangePassword field.
func (r *mutationResolver) ChangePassword(ctx context.Context, input model.ChangePasswordInput) (*model.MessageCreateOutput, error) {
	changePasswordStr, err := r.service.Auth().ChangePassword(ctx, input)
	if err != nil {
		return nil, err
	}

	return &model.MessageCreateOutput{
		Output: changePasswordStr,
	}, nil
}

// CreateUser is the resolver for the CreateUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*ent.User, error) {
	user, err := r.service.User().CreateUser(ctx, input)
	if err != nil {
		return nil, err
	}

	return user, nil
}

// UpdateUser is the resolver for the UpdateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (*ent.User, error) {
	user, err := r.service.User().UpdateUser(ctx, input)
	if err != nil {
		return nil, err
	}

	return user, nil
}

// CreateTransaction is the resolver for the CreateTransaction field.
func (r *mutationResolver) CreateTransaction(ctx context.Context, input model.CreateTransactionInput) (*model.CheckOutOutput, error) {
	transaction, err := r.service.Transaction().CreateTransaction(ctx, input)
	if err != nil {
		return nil, err
	}

	return &model.CheckOutOutput{
		Amount:        transaction.Amount,
		Status:        transaction.Status,
		AccountName:   transaction.AccountName,
		AccountNumber: transaction.AccountNumber,
		Bin:           transaction.Bin,
		Currency:      transaction.Currency,
		Description:   transaction.Description,
		OrderCode:     int(transaction.OrderCode),
		CheckoutURL:   transaction.CheckoutUrl,
		QRCode:        transaction.QRCode,
		PaymentLinkID: transaction.PaymentLinkId,
	}, nil
}

// CreateMovie is the resolver for the CreateMovie field.
func (r *mutationResolver) CreateMovie(ctx context.Context, input model.CreateMovieInput) (*ent.Movie, error) {
	movie, err := r.service.Movie().CreateMovie(ctx, input)
	if err != nil {
		return nil, err
	}

	return movie, nil
}

// UpdateMovie is the resolver for the UpdateMovie field.
func (r *mutationResolver) UpdateMovie(ctx context.Context, input model.UpdateMovieInput) (*ent.Movie, error) {
	movie, err := r.service.Movie().UpdateMovie(ctx, input)
	if err != nil {
		return nil, err
	}

	return movie, nil
}

// DeleteMovie is the resolver for the DeleteMovie field.
func (r *mutationResolver) DeleteMovie(ctx context.Context, input string) (string, error) {
	message, err := r.service.Movie().DeleteMovie(ctx, input)
	if err != nil {
		return "", err
	}

	return message, nil
}

// CreateShowTime is the resolver for the CreateShowTime field.
func (r *mutationResolver) CreateShowTime(ctx context.Context, input model.CreateShowTimeInput) (*ent.ShowTime, error) {
	showTime, err := r.service.ShowTime().CreateShowTime(ctx, input)
	if err != nil {
		return nil, err
	}

	return showTime, nil
}

// UpdateShowTime is the resolver for the UpdateShowTime field.
func (r *mutationResolver) UpdateShowTime(ctx context.Context, input model.UpdateShowTimeInput) (*ent.ShowTime, error) {
	showTime, err := r.service.ShowTime().UpdateShowTime(ctx, input)
	if err != nil {
		return nil, err
	}

	return showTime, nil
}

// DeleteShowTime is the resolver for the DeleteShowTime field.
func (r *mutationResolver) DeleteShowTime(ctx context.Context, input string) (*model.MessageCreateOutput, error) {
	message, err := r.service.ShowTime().DeleteShowTime(ctx, input)
	if err != nil {
		return nil, err
	}

	return &model.MessageCreateOutput{
		Output: message,
	}, nil
}

// GenerateTicket is the resolver for the GenerateTicket field.
func (r *mutationResolver) GenerateTicket(ctx context.Context, input model.GenerateTicketInput) ([]*ent.Ticket, error) {
	tickets, err := r.service.Ticket().GenerateTickets(ctx, input)
	if err != nil {
		return nil, err
	}

	return tickets, nil
}

// Mutation returns graphql1.MutationResolver implementation.
func (r *Resolver) Mutation() graphql1.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
