// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"PopcornMovie/ent"
	"fmt"
	"io"
	"strconv"
	"time"
)

type ChangePasswordInput struct {
	OldPassword        string `json:"oldPassword"`
	NewPassword        string `json:"newPassword"`
	ConfirmNewPassword string `json:"confirmNewPassword"`
}

type CreateFoodOrderLineInput struct {
	FoodID   string `json:"foodID"`
	Quantity int    `json:"quantity"`
}

type CreateSessionInput struct {
	ID           string    `json:"id"`
	UserID       string    `json:"UserID"`
	RefreshToken string    `json:"RefreshToken"`
	ExpiresAt    time.Time `json:"ExpiresAt"`
}

type CreateTicketInput struct {
	SeatID string  `json:"seatID"`
	Price  float64 `json:"price"`
}

type CreateTransactionInput struct {
	SeatIDs    []*CreateTicketInput        `json:"seatIDs"`
	Foods      []*CreateFoodOrderLineInput `json:"foods"`
	ShowTimeID string                      `json:"showTimeID"`
}

type CreateUserInput struct {
	DisplayName string `json:"displayName"`
	Email       string `json:"email"`
	Password    string `json:"password"`
	Role        *Role  `json:"role,omitempty"`
}

type Jwt struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

type ListAvailableRoomFilter struct {
	StartAt    *time.Time `json:"startAt,omitempty"`
	EndAt      *time.Time `json:"endAt,omitempty"`
	ShowTimeID *string    `json:"showTimeID,omitempty"`
}

type ListAvailableRoomInput struct {
	Filter     *ListAvailableRoomFilter `json:"filter,omitempty"`
	Pagination *PaginationInput         `json:"pagination,omitempty"`
}

type ListAvailableRoomOutput struct {
	Data       []*ent.Room       `json:"data"`
	Pagination *PaginationOutput `json:"pagination"`
}

type ListAvailableSeatFilter struct {
	ShowTimeID *string `json:"showTimeID,omitempty"`
}

type ListAvailableSeatInput struct {
	Filter     *ListAvailableSeatFilter `json:"filter"`
	Pagination *PaginationInput         `json:"pagination"`
}

type ListAvailableSeatOutput struct {
	Data       []*ent.Seat       `json:"data"`
	Pagination *PaginationOutput `json:"pagination"`
}

type ListCommentFilter struct {
	MovieID string `json:"movieId"`
}

type ListCommentInput struct {
	Filter     *ListMovieFilter `json:"filter"`
	Pagination *PaginationInput `json:"pagination"`
}

type ListCommentOutput struct {
	Data       []*ent.Comment    `json:"data"`
	Pagination *PaginationOutput `json:"pagination"`
}

type ListFoodInput struct {
	Pagination *PaginationInput `json:"pagination,omitempty"`
}

type ListFoodOutput struct {
	Data       []*ent.Food       `json:"data"`
	Pagination *PaginationOutput `json:"pagination"`
}

type ListMovieFilter struct {
	Status *MovieStatus `json:"status,omitempty"`
}

type ListMovieInput struct {
	Filter     *ListMovieFilter `json:"filter,omitempty"`
	Pagination *PaginationInput `json:"pagination,omitempty"`
}

type ListMovieOutput struct {
	Data       []*ent.Movie      `json:"data,omitempty"`
	Pagination *PaginationOutput `json:"pagination,omitempty"`
}

type ListRoomFilter struct {
	TheaterID  string     `json:"theaterID"`
	ShowTimeID *string    `json:"showTimeID,omitempty"`
	StartAt    *time.Time `json:"startAt,omitempty"`
	EndAt      *time.Time `json:"endAt,omitempty"`
}

type ListRoomInput struct {
	Filter     *ListRoomFilter  `json:"filter,omitempty"`
	Pagination *PaginationInput `json:"pagination,omitempty"`
}

type ListRoomOutput struct {
	Data       []*ent.Room       `json:"data"`
	Pagination *PaginationOutput `json:"pagination"`
}

type ListSeatInput struct {
	Pagination *PaginationInput `json:"pagination"`
}

type ListSeatOutput struct {
	Data       []*ent.Seat       `json:"data"`
	Pagination *PaginationOutput `json:"pagination"`
}

type ListShowTimeFilter struct {
	MovieID   *string    `json:"movieId,omitempty"`
	TheaterID *string    `json:"theaterId,omitempty"`
	Date      *time.Time `json:"date,omitempty"`
}

type ListShowTimeInput struct {
	Filter     *ListShowTimeFilter `json:"filter"`
	Pagination *PaginationInput    `json:"pagination"`
}

type ListShowTimeOutput struct {
	Data       []*ent.ShowTime   `json:"data"`
	Pagination *PaginationOutput `json:"pagination"`
}

type ListTheaterFilter struct {
	Name    string `json:"name"`
	Address string `json:"address"`
}

type ListTheatersInput struct {
	Pagination *PaginationInput   `json:"pagination,omitempty"`
	Filter     *ListTheaterFilter `json:"filter,omitempty"`
}

type ListTheatersOutput struct {
	Data       []*ent.Theater    `json:"data"`
	Pagination *PaginationOutput `json:"pagination"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Mutation struct {
}

type PaginationInput struct {
	Page  int `json:"page"`
	Limit int `json:"limit"`
}

type PaginationOutput struct {
	Total int `json:"total"`
}

type Query struct {
}

type RegisterInput struct {
	DisplayName     string `json:"displayName"`
	Email           string `json:"email"`
	Password        string `json:"password"`
	ConfirmPassword string `json:"confirmPassword"`
}

type RenewAccessTokenInput struct {
	RefreshToken string `json:"refreshToken"`
}

type MovieStatus string

const (
	MovieStatusUpcoming MovieStatus = "UPCOMING"
	MovieStatusOngoing  MovieStatus = "ONGOING"
	MovieStatusOver     MovieStatus = "OVER"
)

var AllMovieStatus = []MovieStatus{
	MovieStatusUpcoming,
	MovieStatusOngoing,
	MovieStatusOver,
}

func (e MovieStatus) IsValid() bool {
	switch e {
	case MovieStatusUpcoming, MovieStatusOngoing, MovieStatusOver:
		return true
	}
	return false
}

func (e MovieStatus) String() string {
	return string(e)
}

func (e *MovieStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MovieStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MovieStatus", str)
	}
	return nil
}

func (e MovieStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "ASC"
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleCustomer      Role = "CUSTOMER"
	RoleReceptionist  Role = "RECEPTIONIST"
	RoleTicketManager Role = "TICKET_MANAGER"
	RoleAdmin         Role = "ADMIN"
)

var AllRole = []Role{
	RoleCustomer,
	RoleReceptionist,
	RoleTicketManager,
	RoleAdmin,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleCustomer, RoleReceptionist, RoleTicketManager, RoleAdmin:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SeatCategory string

const (
	SeatCategoryStandard SeatCategory = "STANDARD"
	SeatCategoryDouble   SeatCategory = "DOUBLE"
)

var AllSeatCategory = []SeatCategory{
	SeatCategoryStandard,
	SeatCategoryDouble,
}

func (e SeatCategory) IsValid() bool {
	switch e {
	case SeatCategoryStandard, SeatCategoryDouble:
		return true
	}
	return false
}

func (e SeatCategory) String() string {
	return string(e)
}

func (e *SeatCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SeatCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SeatCategory", str)
	}
	return nil
}

func (e SeatCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
